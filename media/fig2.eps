%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: fig2.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Marco F. Duarte
%%CreationDate: 4/23/13
%%BoundingBox: 0 0 517 248
%%HiResBoundingBox: 0 0 517 248
%%CropBox: 0 0 517 248
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 6588 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD96FFA8A87DA8A8FFFFFFA8A8FD06FF7DFD6FFFA87D52A8A8FFFF%FF7DFD07FFA8A8FD69FF7D7DFD04FFA852FFFD04A87DFF7D527DFFA8FFA8%7DFD69FFF87DFD04FF52A8A87DA87DA8A8FFA852FF7D7DA8FF7DFD69FF52%7DFFFFFFA852A8FF52FF52A87DFF52FD047DA8A87DFD69FFA8FD08FF7D7D%7DFF7DA8FFFFFF7D7DA87DA8FD05FFA8FD047DFD04FFA87DFD06FFA8A8FD%51FFA8A8FD09FFA8FFA8FD05FFA8FFA8FD07FF27A8A87DA8FFA8FF52FFA8%FFA8FFFFFFA87DFD51FFA8FD1CFF7D7DFFA8FF7D7D7DA8FFA8527DA8A8FF%FF7DFD0FFFA8FD41FFA8A8FD0BFFA8A8FD0FFF5252FFA8527D7D7DFFA87D%A87D52A8FF7DFD05FFA8277D5252A8FFFFFF7DA8FD06FF7DFD0BFF7D7DA8%FD2CFFA8FD0DFF7DFD0FFF7D7DFFFF7D52A87DFF7D52A87D7D7DFF7DFD05%FFA852FFFF7DFFA8A8A87DFFFFA8A8FFFFFFA87DFD08FFA87DFFFFFD05A8%FD28FFA8A8FD0CFFA8A8FD11FF7D7D7DFF7DA8FFFFFFA852A87DA8FD06FF%527DA8A8A87D527D7DFF7D527DA87DFFA87DFD06FFA8A87DFD05FFA8FF7D%A87DA8A8FD24FFA8FD0EFFA8FD12FFA8FFFFFFA8FD0FFF277DFFA8527D7D%A8FF7D52FF7D7DA8FF7DFD05FFA8A8A8FD0BFFA8A87DFFA8FD21FFA8A8FD%0DFFA8A8FD25FF7D7DFFA87D52FF52FF7D7DA87D52A87DA8FD04FF7DA8FF%FF7D7D527DA8FFFFFF7DFD05FFA8A852A8A8FD1EFFA8FD0FFF7DFD14FFA8%FD13FFA87DA8FFA8A8FFFFFFA87DFF7DFFFFFFA87DFD05FF7D7DA8FFFFFF%A8A8FFA8A8FD04FF7D7DA87DA8A8FD1BFFA8A8FD0EFFA87DFD11FF7D277D%FD18FFA8FD06FFA8FFA8A87DFD06FF7D7DFF7DFD04A8FF7D52A8A87DFF7D%A8FFFFA8A87DA8A8FD18FFA8FFA8FD0EFFA8A8FD0FFFA87D7DFD19FF5252%A8FD05FFA8A8A8FD07FF27FFA87DA87DA8A8FF7D7DA87D7DA8A87DFD05FF%FD05A8FD15FFA8A8FF7DA87DA87DFD04A8FD05FFA8A8FD0DFFA87DA8FD1B%FFA8F8A8FD04FFA8A8A8FD07FF7D7DA8A852A87DA87DFFFD047D52FF7DA8%FD08FFA8A87DA8A8FD12FFA8FD07FFA8FFA8A87DA8A8FFFFFF7DFD0CFFA8%7DFD1FFF7DFFFFFF7DA8FD0CFFFD04A8FFA8A8FFFFFF7DA8A8A8FD0CFF7D%FD13FFA8A8FD0BFFA8A87DA8A8FF7DFD09FF7D7DA8FD20FFA87DA87DFD26%FFA87DFD14FFA8FD0FFFFD05A8FD07FF7DA8FD23FF7D7DFD26FFA8A8FD15%FFA8A8FD10FFA87D7DFD04FFA8A87DFD23FFA87DA8A8A8FD09FFFD08A87D%A87DA87DFD04A8FD09FFA87DA8FD16FFA8FD13FF52A8FFFFA8A8A8FD23FF%7DA8FFFFA8A8FD04FFA8A87DFD04A8FFA8FFA8FD09FFA8FF7DA8A8FD05FF%A8A8FD18FFA8A8FD12FFA852FF7DA8FD23FFA87DA8FD04FF7D7D7DFD04A8%FD15FFA8A87DFFFFFF7DA8FD19FFA8FD14FF5227FD24FFA87DFD05FFA8A8%7DA8FD1BFFA8A8FF7DA8FD13FFA8FD06FFA8A8FD11FFA8A87D52FD22FFA8%7DA8FD05FF7DA8FFFF7DFD1CFF7D7DFD15FFA8FD06FFA8FD11FFA8A8FFFF%7DA8FFFFA87D52FFA8FD19FFA8A8FD05FFA87DFD05FF7DFD1AFFA87DA8FD%15FFA8A8FD05FFA8A8FD0EFFA87DA8FFFFFFA852FFFFFF527DA87D7DFD17%FF7DA8FD05FFA87DFD06FFA87DFD17FFA87DA8FF7DFD16FFA8FD05FFA8FD%0EFFA87DFD06FFA8A8FFA8527D7D7DA8FD16FF7DFD06FFA8A8FD08FFA8A8%FD15FFA8A8A8FFFFA8FD17FFA8FD04FFA8A8FD0AFFFD04A8FD07FFA8A8A8%FFA8FFA8527DFD15FF7DFD06FFA87DFD0AFF527DFD13FF7DA8FD04FFA8FD%1CFFA8FD0AFFA8F87DFD08FFA8A8FFA8FD1BFFA8A8FD05FF7DFD0BFF7DA8%FD12FF7DA8FD05FFA8FD17FFA8A8FFFFFFA8A8FD09FF5252A8FD08FFA8A8%FF7DA8FD1AFFA87DFD04FF7DFD0DFF7D52A8FFA8FD0CFFA87DA8FD06FF7D%FD1CFFA8FD15FFA8FFFFFF7DFD1BFFA8A8FFFF7DFD0EFF7D7DFF52A8FD0B%FFA87DFD09FFA8FD18FFA8FFFFA87D52527D52FFFF7D7DFF7DFD06FFA87D%FFFFA8FFFFFFA8A8FD1BFF7DFFA8A8FD0DFFA8527D7DA87DFD0AFFA87DFD%09FFA8A8FD19FFA8FFA8FF27FFA87DFFFF27FF7DA8FFA8A8FD04FF7DA8FF%A8FD04FFA8FD1CFF7DA8FD12FF527DFD08FFA8A8A8FD0BFFA8FD18FFA8A8%FFA8FF7D7DA87DFFA852FF7DA8FF5252A8A8A8FF7DFFA8A8FD04FFA8A8FD%1BFF527DFD13FFA8FD07FFA87DA8FD0CFFA8A8FD19FFA8A8FFFF527DFFFF%A87DFF7DFFA87DA8A8527DFFA8A8A8FD06FF7DFD1BFF7DA8FD1AFF7DA8FD%0EFFA8FD1AFFA8A8A8FF7DA8FFFF52A8FFA8A8A852A87D7D52FF7DA87DFD%06FFA8A8FD19FF7DFFA8A8FD04FFA8A87DA8A8FD0FFF7DA8FD10FF7DFD1A%FF7DFD05FFA87DFFFFFFA8FD04FF7DFD04A8FD21FF7DA8FFFF7DFFA8A8A8%FFFFFFA8FF7DA8A8FD0BFF7DFD0BFFA8A8A8FD04FFA8FD11FFFD09A87D7D%FD09A87DFD04A8FFA8A8A87DFD09A8FF52F852FD13FFA87DFFFFFFA852A8%A8FD07FFA87D7DFD08FFA87DFD0AFFA87DA8FFFF7DA8FFFF7DFD12FFA8FF%A8FFA8FFA8FF7D7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FF%A8FFA8FFA8FFA87D52A8FD13FFA8A8FFFFFF7D7DA8FD0AFFA87DFD06FFA8%A8FD0BFF7DFD05FF7DFFFFA8A8FD19FFA8A8FD11FFA8FD20FFA87DFFFFA8%7DFFFFA8FD0BFFA87DFFFFFFA87DA8FD0AFFA87DFD07FF7DFFA8A8FD19FF%A8FFA8FD10FFA8FD20FF7DFFFFA87DFFFFFFA8A8FD0CFF7DFFA8A8FD0CFF%7DFD08FFA87DFFA8FD19FFA8A8FFA8FD0FFF7DFD1FFF7DA8A87DA8FD05FF%7DFD0DFF527DFD04FFA87D7D7DA8FFFFFF7DFD0AFFA87DA8FD19FFA8FD11%FFA8FFFFFFA8FD1CFFFD04A8FD07FF7DFD0BFF7DA87DFD04FFA852FF7D7D%FFFF7DFD0CFFA87DFD19FFA8A8FFA8A8FD0DFFA8FFA87DA87DFD1AFFA87D%A8A8FD08FFA8A8FD08FFA87DFFFFFF7DFFFFFFA87DFF7D7DFFA8A8FD0CFF%A87DA8FD18FFA8FFFFFFA8FD0FFF52A8FF52A8FD18FFA852A8FD0BFFA8FD%07FFA87DFD05FF7DFFFFFF52FF52A8FFA8FD0EFFA8A8FD18FFA8A8FFFFA8%A8FD0EFF7D7DFF52FD19FFA8A8FD0CFFA8A8FD04FFA87DA8FD07FF7DFFA8%7DA87DA8A8A8FD28FFA8FD13FF7D7DA852FD28FF7DFFFFFFA8A8A8FD08FF%A8A8FD05FF7DFD29FFA8A8FFFFFFA8A8FD0DFFA87DFF52FD29FF7DFF7DA8%FD0BFFA8A8FFFFFFA8A8FD2FFFA8FD3AFFA87DA8FD0CFFA8A8FFFFFFA8FD%31FFA8FD39FFA8FD0FFF7DFFFFFF7DFD32FFA8FD49FFA8FFA8A8FD31FFA8%A8FD48FFA8A8FFA8A8FD7CFF7DFFA8FD2CFF7DA8A8FD4EFFA87DA8FD2CFF%A87DA8FD4FFF7DA8FD2BFFA87D7D7DFD04FFA8A8FD05FFA8A8FD42FFA8A8%FD2BFF7DA852A8A8FFFFA87DFFA8FFA8FFFFFF7DFD70FF52A8FFA87DFF7D%A8A87D52A8A8A8FF7D7DFD6FFF52FFA87DFF7DA8A8FF7D7DA87D7DFF7DA8%FD6EFFA827FFA87D7D7DA8A8A87D7DA87D7DA87DA8FD71FFA87DA87DFF7D%FD04FF7D7DFF7DFD78FFA8FD05FFA8FD5EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2013-04-23T16:29:51-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>124</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAfAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUGms6W+sy&#xA;6Ktyh1WC3jvJbTfmIJneNJPAgvEw26d+oxVD+YLrVbW2jmsXt4II2eXUbu6RpEito4ndmWNJIizF&#xA;wo+1QCp9iqxryn5z1ufQ9C13zTPpum6frVgbsgn6q0M0npyQRcp53584Hdmoo4lcVTu+12WbX9F0&#xA;nTZY2jvoZtSuLpaSA2dsYlCxndazSXKUb+QNTehCqzTfzA8palqD6fZ3jPcxx+vJzt7iONYuAkEj&#xA;SyRrGFZGDIeVGG61ocVXa/r0lgNH1O2ljn0m6u4LK740YFb91gtpY3HcXDxr4FXPcDFU/wAVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirBtN8h6Tb/AJvaz5vj&#xA;uLo6nc6baQyxGRTb+nI0kZUJxrQfVEYfF1r44qyLzboD+YfL19on1ySxh1GGS1uZ4VVpfRmRkcIX&#xA;qFJDfapiqT3nlvWbfzF5bv8AToreeLSbK+sbiaWQw0imSMxIkKpIvxS28VWBHFQetaYqlnlXyfrm&#xA;hW3lOSSJTdWNldaVq628iuFF3JHOt0hkVAeEtuKoFoBIaAhRirWo/lhqR0bXootbm1K/1lRPMt6s&#xA;MUc10kcES+q0Ea8Y/StFRVCHjydiGqAFVa38ra69haaZc20UEF3rra3erC6vFaxW92t9DErcYy8k&#xA;txGjNRKbvvsOSrPcVYr5w863ugaxommW2kNqD6680FtN68dvEs8MfqiJmkBHKSNWKePEjFVfQPM+&#xA;q3+pahY6npH6L/R8UUssxuYp0rNyIQlAOLKqcmr0BU9xiqJvfM9qtxpVtppj1CbVpuELRyAxrBGn&#xA;qzTs6h6qsdOIH2mZRsDyCqYxappk1wbeK7hkuFZ4zCkiM4eKhkXiDWqchyHauKoTXdbbSGsJZYQ9&#xA;jc3UVnczhqNC904ht24UPJWndIzuKcq9AcVTTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYqlVt/ylWo/8wNj/AMnrvFU1xV2Kpdrx1KOw+tadye4tHE5tVAP1iNK+pBv+06E8Nx8f&#xA;Gu1cVRlnd215aQ3drIJba4RZYZV6MjjkpHzBxVVxV2Kse8/eVn8y+WLnT7eYWupxsl3pF73t762Y&#xA;S20vc0WRRy8VqO+Ksa836DeJ+X66fqEyvqurX9rc6y8UVxJbXEgmS4uLZzFHNKlu8MH1ZGZT8PFT&#xA;WtCqgfJ2j3+iny95g1CxFnJq13qrapAsXD6s+szxzWhdSFZOK2sUDVFeTCtN8VUbvyD5zs7XzFrF&#xA;ta6Wuuz6e0ely2HqG4geC0mhiitGmRfTkked5DMX6twII+PFUZD+krrRJNIFvdiK/wBftf0DBfiZ&#xA;rhNNtHtbi4lm+skyokbRT8C/iij7S4q9OxV59+ZF35k0/wAweXLiHX7vR/LN/MdM1NrOKxd4rq4/&#xA;3imZ7y2uqRvJ+5bpuyHxqq3puvX3l611bVdX1q/1/TXvoNL0O3misFuJ7r1Pq7iL6tBYqfUuXMY9&#xA;TYCMvy4nFURpnnFvM+vaRaWaXOn2ifpK5v45CiySSaXcx2Po8onkVovrEjsSrfF6YG6saqoiy/Mz&#xA;T576/t7nTL/T7bS09TUdQukiSCDlClxGknGRpBI8Uqnhw5A7EAkYqq675iQWmi+YNLumax/SVvp9&#xA;5CQ6iRL+4Sx4PEwVkliuZIz8S8loy9zirK8VQuo6pY6dAJ7uXgrMEjQAvJI56JHGoLu57KoJxVLE&#xA;h8y6oxmluH0K1H9xbQrBNdN/lTvKk8Kf8Y4wT35/shVU5ebbQjklpqsI+0yc7OcAdgjG4jkY+7xj&#xA;FWv8WadAP9ykU+jkfaa+j4Qr4VuYzJa79h6tcVTeGaGeJJoZFlikHJJEIZWB6EEbHFV+KuxV2Kux&#xA;V2KuxV2KuxVKrb/lKtR/5gbH/k9d4qmuKuxV2KpFpv8AuJ1qbSW2sr4yXmmHsrluV1b/APBt6qeI&#xA;ZgBRMVT3FXYq7FXEgCp2A6nFWLeWPzC0zzNrWo6dpFndSW+lP6V7qkiIlp6xAZYoX5FpWKsHqq8e&#xA;JBruKqspxV2KuxVLvMfl/TPMWh3uiamhksb+IxTBTxcV3V0b9l0YBlPYiuKpN5m8oy3Wg6XpGkwW&#xA;5ttNmhkjjuJrmBkFqh+rvFPb1cOkoQtUHkvIbE1CqX2vk+18p6ToN0b9Fg8u2NxZ6xe3DNCs1rc+&#xA;nLdXBdS3pyCeBZQSdhyFRXlirh+V3lqTy/ewaLdzD9KxLLHfTXEt8jTFYuNyfUkPqF0t4lJD/YWi&#xA;lamqqItPJeqrDaW19eQzxSatJrerPErxK0qSCa1ghiYy0RJVR2Znr8HT4/hVTi7164uLmTT9ChW7&#xA;u4mMdzdyVFnbMOokcbySD/fUe/8AMUBBxVX0zQorWY3t1M1/qjqVe+mABVSamOFB8MUdQPhXrQci&#xA;x3xVgkqeY5POV7pD+ZLqODTdDk1HVblTEkUd7fTuLXjWM8IoUtpiFNSRTlXuqyK28/aMulowlnlu&#xA;f0XJqdobmGS3N5b2yKZJY+ar/OhZaBhyHw4qhW8z33lny1pEl9aXesXt79WF3LG6Va91GVUWKH1W&#xA;VaetLsgYLHGPAAFVdazeTdQ1JbI202jeYblV+uRW3rWsi3EkH1k2811aEW8syRfvPTMjHj8VKYqp&#xA;+TpvNzWN5AmpR6mdKv7qwI1GPjNLHBJ+5rcwUAIhZA7NC5ZgT3xVP/8AEF3bVGqaVdW4XY3Fqv16&#xA;Fj/kCAG4p7vCoxVHafrGlakrNYXkN16dBIInVyhPZwDVT7HFUXirsVdirsVdiqSNaWt55i1S3uol&#xA;mgksbHlG4qDSe7IPzBFQexxVUHlfTkA9Ge+iK/Y4312VWnSiNKyU26caYq3+hdSX+7129HH7COlm&#xA;67dAxNvzYePxV98VWsnm+3+JJbDUABQQsktk3zMoa7B/5FjFUDqV9HqkaafIj6R5gjf6xpSXgUK0&#xA;8IJBiljLpIjLyWRUbn6bHkFriqdaPqcWp6dDeIjRGQFZYHpzilQlJYnptyjdSpp3GKozFUs1LX7S&#xA;znWziR73U3XlHp9txaXia/G/IqkSbfbkZRXYVO2KoUaFeapSTzFIkkR3GjwEm0H/ABmZgj3J/wBc&#xA;BP8AIqK4qnaRxpXgoWu5oAKkADt7ADFV2KuxV2KuxV2KobVNNtNU0y70y8T1LO+hktrmOtOUcyFH&#xA;FfdWxVgvkvRNC/KrSo/LJmmOiyu0ul3s7PNNLcOB6lsUQbynjziSJBzHKi8lYsqyVbfWNbq1+sml&#xA;6U32bFH43cw8Z5Yz+6U/77jbl/M+5TFU6tra3tYI7e2iSC3iULFDGoRFUdAqrQAYqqYqx6HyLolp&#xA;d6vqNgbiHVNZhMN3dTXNzdoaKVjP1e5klg/d8vhHClNuhOKpdo35dtYz6X9av1vLPTdHbRBamDhy&#xA;idgWKuZJGVWSONSu7HgDy61VVLX8u9KuLDTItcV7u90dEt7K8hubmBjHbMRbzMsLwqJuH2mA6lgD&#xA;xNMVUofy6W08yQ6nZXaRaZbXg1ODSFh40u00r9DoBOGPGEWwHwelXlvyp8OKp95a0WTSdNaGeQTX&#xA;lzPPeXsyiitPcytK4UHfgnLgld+Kiu+KpriqT+Y4PLKwpeazBE7xn07WUxl7n1G6JbFAZvUamwj+&#xA;LwxVD+WdP1mGaa5up54NOlULZ6Rcy/Wpot6mWW4cvJzbp6fqMq/zGvwqsgxV2KuxV2KpVbf8pVqP&#xA;/MDY/wDJ67xVNcVdirsVUL+ws7+1e0vIVnt5Kco2HcGqkHqGUiqkbg7jFWCSayvkHzC6eYb9V8s6&#xA;4wFhqdwxDR3sabQXDHZnlhj+B61fhuC/JnVZJ6uu60P9HEmjaY3+75EH16VT3jjeq2495FL9RwQ7&#xA;4qmmm6Vp+mwNDZQiJXYyStUu8kjdXkkcs8jnuzEk4qisVdirsVdirsVdirsVSa6195rqTT9FiF7e&#xA;xEpczkkWts3cTSD7Tj/fSVbpy4A8sVUZ/KWnXEE02rTNd37pU6k9Ea34sJFNqN1gEborCm9VBYsR&#xA;XFUDonnj64HsI7abVdTtf76ayVFtpoSSI7qKaZ4omSShBVHYq4ZdwORVTb1fNk5KrbWNip+xM8st&#xA;04H+VCqW61+UpxVsad5iloLnV0iA72VqsRPz+sPdj8MVcNDvTtLrl/KndaWkddv5oreN/fY4q3/h&#xA;uybeS5vpH7v9eukr/sY5EQfQuKuPlqxG8dzfI46P9eu3p/sZJXU/SMVWnRtVjBa21y6DL/dxXEdt&#xA;NFX/AC6RRzMP+eoPviq2DV9QtL2Gw1mJFNy3C01G35CCWShb03RizQuQDxBZlP8ANyIXFVTUtd9G&#xA;5/R2nQ/X9WKhjbK3COJW+zJcy0YRIe2xZt+KtQ0Vdpmhejc/pHUJvr+rspX6yy8I4kbdo7aKrekh&#xA;pvuWag5M1BRVNcVdirsVQGqPLbSQagHmaCCsdxawoJOazOi+oRUH9zTkSK/Dy2JpiqPxVKrb/lKt&#xA;R/5gbH/k9d4qmuKuxV2KpJNr815M9poES3kyMY5756izgYbEM43mcf77j6HZ2TY4qk/mn8vNP1ny&#xA;9fJqQ/S2t+k0tjfXCryguUHOI2qAFYAHVfsDkw+2WO+Ko/TPNf1nyfc6vPJBb3dhbu148xKW6SRx&#xA;eqJW48mWGSNllHU8GHfFWJ6P+aGqypcXMtxp+pxS6l+itJsrWKa3kdnvBaxXM85kuUjjekjKPTqy&#xA;ryWoqMVeg6Dqy6vpFvqCxmEzBhJCSGKSIxSROQ2PF1IriqPxV2KuxV2KobUdSsdOtjc3swhiqEUm&#xA;pZnY0VERas7sdlVQSTsBiqVvbavrY/0oy6VpRP8AvLG/C8nX/i2RD+4Q9eEZ5narL8SYqjbi40nQ&#xA;dNiRY0t7ZKQ2dnAgBdzXjFDGtKsabAfPpiqBh0S51V1vPMSq6gh7fRgeVtDShUzdriUHerfAppwF&#xA;RzZVFa5pdxciG+09lj1ax5NaOxokitT1LeUgE+nKFAJoeJo1CVpiqJ0rU7fU7JLqEMlSyTQyACSK&#xA;VDxkicAkckYEGhp4VG+KovFXYq7FXYq0zKqlmIVVFWY7AAdzirF9Ue682WM1hpT/AFXSpB8WuMvJ&#xA;i6kMjWKN9oo4DidvhBA4B+qqpj5QjtR5csZYIBbvcxLNdICzt9YdR6xkkcs7vzqGZmJPc4qnGKux&#xA;V2KuxV2KpfpSG0U6YUKQ2gVLF5JRK8sConxH9scGbh8VegNd8VUrb/lKtR/5gbH/AJPXeKprirsV&#xA;edeX9E/MzVPM2s3Xm+S3i8rXUg/Ruk2l2/qJHECqx3CpEFdXrykCzCpqrBkoAq9Bhht7aBIYUSGC&#xA;FQscaAKiKooAAKAADFVDWL/9H6RfX9OX1O3ln49a+khenbwxVIjY/wCHBpl7XlaR29vperntwQBI&#xA;Lg7dI5GKsdvgcsdkxVOdX0LStWsms76HnC0kU1Y3eGRZYHWSKRJYmSRGRkBBVgcVVdK0ux0rTrfT&#xA;rCP0rO1QRwxlmchR/M7lnZj1LMSSdya4qisVdirsVdiqReZbR4prLX4ITPcaR6nqQhebvazhRcCM&#xA;UY+ooRXXiKtx4ftnFU0n1Owg05tSknQWCReubgHknpceXIEVqCOlOuKpdo9jc3Vz+m9UjMd06kWF&#xA;m9P9EgbsabetIN5D2+yNhVlU6xV2KsA8wtH5X86HzFbWupahc64kGmDTIbiGOzkuX5GOVYZCgMyx&#xA;21JJCw4x9OXQKsj0vzjo+oakdKX1YtTjQGeB43MaS+kkzwfWUDW7yxpMpZUkPXboaKp5irsVQmp6&#xA;rY6bAJruTjzbhDEoLyyyEEiOKNas7kA7KMVStdLvtaYTa4no2FeUOiAhg3g14ykrIf8AiofAO/PY&#xA;hVPwABQbAdBiqU+Wvgtby3b+9gv7z1B4etcPcJ/yTmX/AGsVTbFXYq7FXYq7FUDqVrKzQ3lqkRvb&#xA;YhVklDH9w7obhF4VarIm2x+IDFWF+d9APnPTNattJuaXNxpenXuj3KOyI00c11NByKlf3cv2H/yW&#xA;OKpb+XVl5S8w3+leYNCsHsY9OtzJqEZlmZk1GVWhaykDuwrbD1DIpHUxkYq7ULvU4Lv8yPOqzJPN&#xA;5cs7ix0VFEq8Taaet64K+o0bD1pyjVSpZaig2xVNdd1u98oDRfLugR2MzTNFZxR3s7LK7ypPLJcS&#xA;8OThUW2eWR2U+oSRUGpxVM9J88aZrF6NFubQv6/O0kuV4S2M9zHbpPcwRFisjoqS0DPEoajeG6qX&#xA;6FNNdeV9O0VpvXJ1a904SElz9S0nUJ0pKTu3KG0SF2P7Tb4qzi4t4Lm3lt7iNZYJkaOaJxVWRxRl&#xA;YHqCDiqVeXLieJZ9FvJGkvNL4oszmrz2r1+rzknqxClHPd0Y9KYqnOKuxV2KuxV2KuxVgtgsb+a/&#xA;0GWP+HLSZ7jT1oPSkvkpI9mCNilqW9VF/m2WnoEYqzrFXYq7FUk1nyV5b1m/j1DUbVpbyFVWGZJ5&#xA;4WQJz4lfSdKNSaReXXizL9kkYqgNP8iR2PmZtVhuwun+vJew6asIX07mW1isyRKG/uxFD8KcOrfa&#xA;pQYqyrFUp1HXWS5OnaXCL7VQAZIuXGGBWFQ9zKA3pgj7KgF27LQEhVdpmhLbXBv72Y3+rOpR7x14&#xA;qiEgmO3jqwhjqBsCS1BzZiK4qmmKuxVJ9NPoeYdYtW63H1fUEalKh4vqzIPHj9UBP+sMVTjFXYq7&#xA;FXYqls2rX6Sui6LeSqrFVlR7MKwBpyXlcK1D7gHFVn6Z1H/qw33/AAdj/wBlOKsd0zVtStfOeqWz&#xA;6PqEoubO1ntYlWyVIIo5JkaMyLccN5HLLU8jU7UWuKpvDLJbW9zDY+XLyyF08s0z2505GM85LSTH&#xA;/SCDIzGpZganriqC0ew/R2hy6O2hajewXRna/lupLB5Lh7pmaZpaXCg8+ZFAKU2xVSs9Ht1sLW21&#xA;TyxNq9xaRLbR3t3FpjzNDE/KFXZrhqsgC1PdvioK0xVDDy56Ou3GuWmk6pFfSNPcW8LyafJaw3dx&#xA;Alu9yIhcI5ZkiUEGSn2qULE4q7ywJ7K+eK20bUZbbR4Rp8LySWRle4nK3V5NI31gK7TM0RJH7Qbp&#xA;irJv0zqP/Vhvv+Dsf+ynFVI39ybpbo+Xb36yiNEsvOx5BHKsy1+s9CUBxVj3k/zz541jzRqul6r5&#xA;MutK0iyuJobXXJZY1SREJ9MmByHbkB9uIutfbfFWd4q7FXYq7FUr8wahc28EVnYEfpXUGMFkSAwj&#xA;PEl53UkVSFfiP8xotasMVS/XNP0fTfLcNj6zW0kDKdLmCtPcm8SsiOiCrzSswZpB+2C/LYtiqno1&#xA;zr/mK1M18/6FSKRoLvTLZg90ssezLLcMKIrA1URrXiVYSUOKpiPKfl/hR7QTSjpdTPJNcj5XEjNM&#xA;P+DxVSk0fV7CsujXzzKN207UZHnifbcJctzuImJp8TGRR/JiqL0rXLa/kltmR7TUbcA3NhOAJUDE&#xA;hXFCVeNqfC6Er1HUEBVMHdI0aSRgiICzuxoABuSScVSE3+o66eGku1npB+3q9B6k48LNWBHE/wC/&#xA;mFCPsBuQdVU207TbHTrVbWyiEUKksRUszOxqzu7Es7sd2ZiWY7k1xVE4qksuq6lqF1Ja6IsawwMU&#xA;utVnUvCHU0aKGNWQyupFHPIKp2qzBlCqndT67ooW5llbV9MWn1semiXcKnrKnpBElROrR8A9KkFi&#xA;ApVVL6aIa3oWoQussV2J7JXQhkKTxfWlkDDY/wC8YA/1sVTrFXYq7FXYq7FXYqkFzafWfMV/x5et&#xA;BaafPBxcx1kjnu2Cs4DUV/stsfhJxVObK4a5tIZ2jMLyKDJCxVmjf9qNipZeSNVTQ9cVVsVdiqhf&#xA;3tvYWNzfXLcba0ieeZgKkJGpZjQewxVLNJkt9G0O1GrXENnczlproyyLGhurlzNMqFiNvVkIUeGK&#xA;p0CCAQag7gjFXYq7FXYq7FXYqtlliiieWV1jijUtJIxCqqqKkknYADFWIWWsTXOoTX1tbG71m8jV&#xA;LGzesaWdiTyjkumIJhM5/eMtObDivE8CQqnul6EtrO1/ezG/1eRSkl668QqEgmKCOrCGKoHwgkmg&#xA;Lszb4qhdXP6H1JdcXaxnCW+sr0CqDSG6Ndh6RbjIf5DyJpGBiqfYq7FUj81LpC28E93K8F/G5Glz&#xA;WwLXfrEV4QItTJy41dCCpUfGOIxVKtJTVNZultPOCJBdQos0OjR/7zTqtP8ASHPJxMVc/FFyKxNS&#xA;vP8AdysqmfnXzUvlnR474WxvLi5u7XT7SDn6SG4vZlgi9WWj+nGGccm4mg7E7Yqo2Pmu6PnOXypq&#xA;FokV1+j11S1ubeRpY3h9X0JFkDIhjdXI49Qwr4EYqr6tPc6nfHQ7GRoYkUNq97GSrxxsKrBE4+zL&#xA;KOpG6JvszIcVTm3t4LaCO3t41hghUJFEgCqqqKBVA2AAxVUxVhHmEjy5Dwc+nob3dvd2k3a1kjuE&#xA;kuLev7Mc0YcxV2DFo6isa4qzfFXYq7FXYq7FXYqlVt/ylWo/8wNj/wAnrvFV59PTtSr+5hs9Rf4j&#xA;8SyNeEADxQiSNP8AJ+IftFtlUyxV2KtMqspVgGVhRlO4IPY4q87ub3SLX86Lw3dzHLJJ5a5G1koZ&#xA;II7a5Z5GRW/3XcLPuR1MVD2xVF/kgbc/ldoht7iO5iZZ3VoW9SKMvcysbeNxUMlsW9FSpp8G22Ks&#xA;6xV2KuxV2KuxVKfM+gy65py6et9LYW7zRveNAqGSWGM8jCC4ZVDsF5fCarVe+KozTdMsdNthbWUX&#xA;pRVLtUs7u7faeR3LO7t3ZiSe+KorFVssUUsTxSoskUilZI2AZWVhQgg7EEYqk2gSSWM8nl+5dne0&#xA;T1NOmcktNZ14rVm3Z4DSN+ppwYmr4qqahrr/AFp9N0iJb3VFp6wJpBbBhUNcOK0NDVYx8beAWrBV&#xA;U0vQ47SZr26lN9qsq8Zb6QAEKTX04U3EUVf2V69WLNviqvqmlwajAscjNFNEwltbqIgSwygECSMk&#xA;EVoSCCCGBKsCpIxVi2v6dq/m7yvfeXzc29hrVvKkd8ZYTNC3H44biOPmjqGPGaIh/gkXixbiwKq+&#xA;+0vVNH8z6p5s+swXIvrK20yy0/0WSUzrKBbI05dqR+tPITRB9urE8RirJNF0pNMsFt/UM87M0t3d&#xA;MKNNPIeUkrCppybovRRRRsBiqOxV2KoXVNMstU06506+iE1ndxtFPE3Qqwofp8DiqtbQ+hbxQc3l&#xA;9JFT1JTyduIpydu7HucVVMVdirsVdirsVWiOMSNIFAkYBWeg5FVJKgnwHI0+eKrLu3+sW0kIcxs6&#xA;/BKArMjjdXUOGXkjUYVHXFVHS7s3FuyyEtc2zm3uiYzFWVAKuqEvRXBDr8R+EjFUXirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdiqX6xosOprCTPNaXFu5aG6tWVJlVhxkTkyv8ADIpo23gwoyqwVRGn6fZa&#xA;fapa2cSwwJUhVqSWY1ZmY1ZmZjVmY1J3O+KojFXYqkmtf6BqdhrCbRs6WGoU7w3D8YHI7mO4ZQP5&#xA;Vdziq++/0vzLp9r1jsI5L+Yj9mRwbe3Dezq8xHumKpxirsVdirsVdirsVdirsVdirsVY95n80T6T&#xA;NDBaLp8szKZJkv8AUFsCEBovpj0p2dm3pUKu32sVR/l7VZtU05byVLeMuzBUtblbtQo6cpEVF5/z&#xA;KtQP5jiqKS5sm1CW2SVWvUijeaENVljZnEbMv7PIhqHvT2xVEYqo217aXLzpBKsj20hhuEU/FHIA&#xA;G4uOoPFgwr2IPQ4qrYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhtTsINR066sLivo3cTwyFT&#xA;RgsilSQexFdsVSDyNeXeojVL7UE9PVI7hdPu4qceBs41BAG/wPLJJNGe6OuKsoxV2KuxV2KuxV2K&#xA;uxV2KuxV2KvMvzAPlyTzl5Z0P17dL/VtZt9Q1b1JE9T0dOgaS1iIY8gJLlIRGnQnlQVJxVFxeabz&#xA;SptRFlYQraQeYY9Ml0+rm7me/kieS6WQkRqAtz6vDiRwU1cGoCqiutfovRvM2pvdPaX82u3UdxJD&#xA;C11O3oIEtoYYwkg5y28MSpyUirbVYgYqgbL8y/MOm+X7e91J7bWbl9Nvde1GSNGs4re202C0a7tr&#xA;cqLj6w6y3lEY0HwsrHkuKsuty0f5mXyQ7RT6PbS3gH+/EuZkhYjxZTIK9wo/lxVlGKuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVhM/wDyqz63P631b1/0&#xA;xF69fUp+leL8K/s8qepy/Z68u+Kp5pv6I/xLrH1H1PrdLf8AS3H/AHn9f0/3df8Ai/0OHOn7Hp1/&#xA;ZxVL/PP+Aa2P+LPSr+9+qep6tfT+D1+fpf7o+x6vqfu/s8u2Kplo/wCiP0zrPoc/0t6sX6R9b7fD&#xA;0/8AR+Hb0ePLhx25c6/HzxVOMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -248 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 248 li
517 248 li
517 0 li
cp
clp
gsave
0 233 mo
517 233 li
517 0 li
0 0 li
0 233 li
cp
clp
-38.5 -58.5 mo
520.5 -58.5 li
520.5 724.5 li
-38.5 724.5 li
-38.5 -58.5 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
407 223 mo
412 209.335 414.001 193.999 422 182 cv
429.999 170.001 444.668 151.333 455 151 cv
465.332 150.667 474.334 170.334 484 180 cv
269 185 mo
289.998 172.335 312.502 147.5 332 147 cv
351.498 146.5 373.501 169.335 386 182 cv
398.499 194.665 403.334 216.334 407 223 cv
410.666 229.666 407.667 222.333 408 222 cv
269 185 mo
285.332 161.002 301.835 128.998 318 113 cv
334.165 97.0015 343.002 92.9995 366 89 cv
388.998 85.0005 437.835 80.6675 456 89 cv
474.165 97.3325 470.334 123.835 475 139 cv
479.666 154.165 482.334 173.167 484 180 cv
485.666 186.833 484.667 180 485 180 cv
399 37 mo
283 115 li
336 199.5 li
510 70 li
400 37 li
.75021 .679683 .670222 .90164 cmyk
@
grestore
364.414 115.586 mo
365.195 116.367 365.195 117.633 364.414 118.414 cv
363.633 119.195 362.367 119.195 361.586 118.414 cv
360.805 117.633 360.805 116.367 361.586 115.586 cv
362.367 114.805 363.633 114.805 364.414 115.586 cv
false sop
.75021 .679683 .670222 .90164 cmyk
f
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
364.414 115.586 mo
365.195 116.367 365.195 117.633 364.414 118.414 cv
363.633 119.195 362.367 119.195 361.586 118.414 cv
360.805 117.633 360.805 116.367 361.586 115.586 cv
362.367 114.805 363.633 114.805 364.414 115.586 cv
@
361.478 115.017 mo
326.029 68.8521 li
@
321.157 62.5068 mo
323.65 70.6792 li
328.409 67.0249 li
321.157 62.5068 li
cp
f
0 lc
0 lj
321.157 62.5068 mo
323.649 70.6792 li
328.409 67.0249 li
321.157 62.5068 li
cp
@
1 lc
1 lj
35 156 mo
197.1 156 li
77 66 mo
96.3315 69.666 120.835 69.334 135 77 cv
149.165 84.666 160.5 95.1685 162 112 cv
163.5 128.832 150 156.002 144 178 cv
@
205.1 156 mo
197.1 153 li
197.1 159 li
205.1 156 li
cp
f
0 lc
0 lj
205.1 156 mo
197.1 153 li
197.1 159 li
205.1 156 li
cp
@
1 lc
1 lj
72 195 mo
72 20.8999 li
@
72 12.8999 mo
69 20.8999 li
75 20.8999 li
72 12.8999 li
cp
f
0 lc
0 lj
72 12.8999 mo
69 20.8999 li
75 20.8999 li
72 12.8999 li
cp
@
1 lc
1 lj
124 36 mo
124 36 li
187 148 li
@
[4 4 ] 0 dsh
41 100.5 mo
41 100.5 li
104 212.5 li
@
159.545 95.2622 mo
160.326 96.0435 160.326 97.3096 159.545 98.0908 cv
158.764 98.8716 157.498 98.8716 156.716 98.0908 cv
155.936 97.3096 155.936 96.0435 156.716 95.2622 cv
157.498 94.4814 158.764 94.4814 159.545 95.2622 cv
f
[] 0 dsh
159.545 95.2622 mo
160.326 96.0435 160.326 97.3096 159.545 98.0908 cv
158.764 98.8716 157.498 98.8716 156.716 98.0908 cv
155.935 97.3096 155.935 96.0435 156.716 95.2622 cv
157.498 94.4814 158.764 94.4814 159.545 95.2622 cv
@
gsave
388.184 75.0068 mo
458.184 75.0068 li
458.184 50.0068 li
388.184 50.0068 li
388.184 75.0068 li
cp
clp
gsave
387.188 76.127 mo
459.188 76.127 li
459.188 49.127 li
387.188 49.127 li
387.188 76.127 li
cp
clp
397.968 53.8555 mo
398.135 53.1875 398.23 53.0459 398.516 52.9736 cv
398.731 52.9258 399.518 52.9258 400.018 52.9258 cv
402.427 52.9258 403.498 53.0215 403.498 54.8809 cv
403.498 55.2393 403.403 56.168 403.308 56.7891 cv
403.284 56.8838 403.235 57.1699 403.235 57.2422 cv
403.235 57.3838 403.308 57.5508 403.521 57.5508 cv
403.784 57.5508 403.832 57.3594 403.88 57.0029 cv
404.523 52.8555 li
404.547 52.7598 404.571 52.5215 404.571 52.4502 cv
404.571 52.1875 404.332 52.1875 403.928 52.1875 cv
390.694 52.1875 li
390.123 52.1875 390.1 52.21 389.933 52.6641 cv
388.502 56.8613 li
388.478 56.9082 388.358 57.2422 388.358 57.2891 cv
388.358 57.4326 388.478 57.5508 388.645 57.5508 cv
388.884 57.5508 388.907 57.4316 389.051 57.0508 cv
390.339 53.3555 390.957 52.9258 394.486 52.9258 cv
395.416 52.9258 li
396.084 52.9258 396.084 53.0215 396.084 53.2119 cv
396.084 53.3555 396.012 53.6416 395.988 53.7139 cv
392.793 66.4453 li
392.58 67.3262 392.508 67.5889 389.957 67.5889 cv
389.099 67.5889 388.957 67.5889 388.957 68.042 cv
388.957 68.3281 389.218 68.3281 389.361 68.3281 cv
390.006 68.3281 390.673 68.2803 391.316 68.2803 cv
391.983 68.2803 392.676 68.2568 393.344 68.2568 cv
394.011 68.2568 394.68 68.2803 395.323 68.2803 cv
396.015 68.2803 396.729 68.3281 397.396 68.3281 cv
397.636 68.3281 397.922 68.3281 397.922 67.8506 cv
397.922 67.5879 397.73 67.5879 397.11 67.5879 cv
396.514 67.5879 396.205 67.5879 395.584 67.54 cv
394.893 67.4697 394.702 67.3984 394.702 67.0166 cv
394.702 66.9941 394.702 66.873 394.798 66.5146 cv
397.968 53.8555 li
0 0 0 1 cmyk
f
414.515 69.1016 mo
413.942 69.1016 li
413.926 69.1543 413.773 69.9434 413.64 70.3301 cv
413.539 70.5986 413.487 70.7324 412.445 70.7324 cv
411.018 70.7324 li
411.304 69.792 411.791 69.1357 412.731 67.875 cv
413.555 66.7656 414.295 65.6563 414.295 64.2939 cv
414.295 62.0254 411.858 60.1074 408.63 60.1074 cv
405.401 60.1074 402.964 62.0254 402.964 64.2939 cv
402.964 65.7734 403.771 66.8672 404.947 68.4473 cv
405.436 69.0859 405.973 69.8418 406.241 70.7324 cv
404.813 70.7324 li
403.805 70.7324 403.736 70.5986 403.652 70.4141 cv
403.519 70.0938 403.316 69.1357 403.316 69.1006 cv
402.744 69.1006 li
403.351 71.9258 li
406.375 71.9258 li
406.729 71.9258 406.846 71.9258 406.846 71.5557 cv
406.846 70.3467 406.224 68.917 405.87 68.0928 cv
405.233 66.6133 404.762 65.5215 404.762 64.2773 cv
404.762 61.8887 406.661 60.5791 408.629 60.5791 cv
410.611 60.5791 412.494 61.9072 412.494 64.2773 cv
412.494 65.5381 411.991 66.6973 411.42 68.0078 cv
411.05 68.8486 410.41 70.3281 410.41 71.5391 cv
410.41 71.9248 410.513 71.9248 410.898 71.9248 cv
413.907 71.9248 li
414.514 69.0996 li
f
424.578 74.0488 mo
424.578 73.9766 424.578 73.9297 424.174 73.5234 cv
421.193 70.5215 420.432 66.0146 420.432 62.3662 cv
420.432 58.2188 421.336 54.0713 424.27 51.0889 cv
424.578 50.8027 424.578 50.7559 424.578 50.6836 cv
424.578 50.5166 424.483 50.4453 424.342 50.4453 cv
424.103 50.4453 421.957 52.0664 420.551 55.0947 cv
419.334 57.7168 419.049 60.3643 419.049 62.3652 cv
419.049 64.2256 419.31 67.1094 420.621 69.8037 cv
422.052 72.7373 424.102 74.2871 424.341 74.2871 cv
424.482 74.2871 424.578 74.2148 424.578 74.0479 cv
f
433.95 61.127 mo
434.095 60.5068 434.643 58.3145 436.312 58.3145 cv
436.431 58.3145 437.002 58.3145 437.504 58.623 cv
436.834 58.7422 436.358 59.3389 436.358 59.9102 cv
436.358 60.291 436.621 60.7441 437.265 60.7441 cv
437.789 60.7441 438.553 60.3145 438.553 59.3613 cv
438.553 58.1201 437.146 57.7881 436.336 57.7881 cv
434.952 57.7881 434.118 59.0518 433.832 59.5996 cv
433.235 58.0254 431.949 57.7871 431.258 57.7871 cv
428.777 57.7871 427.418 60.8623 427.418 61.459 cv
427.418 61.6963 427.657 61.6963 427.707 61.6963 cv
427.897 61.6963 427.968 61.6484 428.016 61.4326 cv
428.826 58.9063 430.399 58.3105 431.211 58.3105 cv
431.662 58.3105 432.496 58.5254 432.496 59.9082 cv
432.496 60.6465 432.092 62.2441 431.211 65.5811 cv
430.827 67.0586 429.993 68.0605 428.944 68.0605 cv
428.801 68.0605 428.254 68.0605 427.752 67.752 cv
428.35 67.6328 428.873 67.1318 428.873 66.4639 cv
428.873 65.8203 428.35 65.6299 427.991 65.6299 cv
427.275 65.6299 426.68 66.25 426.68 67.0127 cv
426.68 68.1094 427.871 68.5859 428.922 68.5859 cv
430.494 68.5859 431.353 66.917 431.425 66.7734 cv
431.711 67.6563 432.568 68.585 434 68.585 cv
436.455 68.585 437.813 65.5098 437.813 64.9131 cv
437.813 64.6738 437.6 64.6738 437.527 64.6738 cv
437.313 64.6738 437.266 64.7715 437.219 64.9355 cv
436.432 67.4883 434.811 68.0586 434.047 68.0586 cv
433.116 68.0586 432.735 67.2959 432.735 66.4863 cv
432.735 65.9609 432.88 65.4375 433.141 64.3877 cv
433.951 61.1221 li
f
448.263 66.5645 mo
448.263 64.7139 448.043 63.3857 447.271 62.209 cv
446.748 61.4355 445.707 60.7637 444.362 60.7637 cv
440.461 60.7637 440.461 65.3535 440.461 66.5645 cv
440.461 67.7754 440.461 72.2617 444.362 72.2617 cv
448.263 72.2617 448.263 67.7734 448.263 66.5645 cv
cp
444.362 71.793 mo
443.59 71.793 442.563 71.3379 442.227 69.96 cv
441.992 68.9678 441.992 67.5898 441.992 66.3457 cv
441.992 65.1191 441.992 63.8408 442.244 62.916 cv
442.598 61.5879 443.673 61.2344 444.363 61.2344 cv
445.271 61.2344 446.145 61.79 446.447 62.7646 cv
446.717 63.6729 446.733 64.8838 446.733 66.3457 cv
446.733 67.5898 446.733 68.833 446.515 69.8926 cv
446.179 71.4229 445.034 71.793 444.362 71.793 cv
f
457.278 62.3662 mo
457.278 60.5068 457.017 57.6221 455.705 54.9277 cv
454.274 51.9951 452.225 50.4453 451.985 50.4453 cv
451.844 50.4453 451.748 50.54 451.748 50.6836 cv
451.748 50.7559 451.748 50.8027 452.201 51.2324 cv
454.537 53.5908 455.896 57.3818 455.896 62.3652 cv
455.896 66.4434 455.014 70.6377 452.058 73.6426 cv
451.748 73.9287 451.748 73.9756 451.748 74.0479 cv
451.748 74.1914 451.844 74.2871 451.986 74.2871 cv
452.226 74.2871 454.37 72.665 455.777 69.6367 cv
456.994 67.0146 457.28 64.3682 457.28 62.3652 cv
f
grestore
grestore
gsave
90.1304 29.3999 mo
160.13 29.3999 li
160.13 4.3999 li
90.1304 4.3999 li
90.1304 29.3999 li
cp
clp
gsave
89.1343 30.52 mo
161.134 30.52 li
161.134 3.52002 li
89.1343 3.52002 li
89.1343 30.52 li
cp
clp
99.9146 8.24854 mo
100.082 7.58057 100.177 7.43896 100.462 7.3667 cv
100.678 7.31885 101.464 7.31885 101.964 7.31885 cv
104.374 7.31885 105.445 7.41455 105.445 9.27393 cv
105.445 9.63232 105.35 10.561 105.254 11.1821 cv
105.231 11.2769 105.182 11.563 105.182 11.6353 cv
105.182 11.7769 105.254 11.9438 105.468 11.9438 cv
105.731 11.9438 105.779 11.7524 105.827 11.396 cv
106.47 7.24854 li
106.494 7.15283 106.518 6.91455 106.518 6.84326 cv
106.518 6.58057 106.279 6.58057 105.875 6.58057 cv
92.6411 6.58057 li
92.0698 6.58057 92.0464 6.60303 91.8794 7.05713 cv
90.4487 11.2544 li
90.4243 11.3013 90.3052 11.6353 90.3052 11.6821 cv
90.3052 11.8257 90.4243 11.9438 90.5913 11.9438 cv
90.8306 11.9438 90.854 11.8247 90.9976 11.4438 cv
92.2856 7.74854 92.9038 7.31885 96.4331 7.31885 cv
97.3628 7.31885 li
98.0308 7.31885 98.0308 7.41455 98.0308 7.60498 cv
98.0308 7.74854 97.9585 8.03467 97.9351 8.10693 cv
94.7397 20.8384 li
94.5269 21.7192 94.4546 21.9819 91.9038 21.9819 cv
91.0454 21.9819 90.9038 21.9819 90.9038 22.4351 cv
90.9038 22.7212 91.1646 22.7212 91.3081 22.7212 cv
91.9526 22.7212 92.6196 22.6733 93.2632 22.6733 cv
93.9302 22.6733 94.6226 22.6499 95.2905 22.6499 cv
95.9575 22.6499 96.6265 22.6733 97.27 22.6733 cv
97.9614 22.6733 98.6763 22.7212 99.3433 22.7212 cv
99.5825 22.7212 99.8687 22.7212 99.8687 22.2437 cv
99.8687 21.981 99.6772 21.981 99.0571 21.981 cv
98.4604 21.981 98.1519 21.981 97.5308 21.9331 cv
96.8394 21.8628 96.6489 21.7915 96.6489 21.4097 cv
96.6489 21.3872 96.6489 21.2661 96.7446 20.9077 cv
99.9146 8.24854 li
0 0 0 1 cmyk
f
116.461 23.4946 mo
115.889 23.4946 li
115.873 23.5474 115.72 24.3364 115.586 24.7231 cv
115.486 24.9917 115.434 25.1255 114.392 25.1255 cv
112.964 25.1255 li
113.25 24.1851 113.738 23.5288 114.678 22.2681 cv
115.501 21.1587 116.242 20.0493 116.242 18.687 cv
116.242 16.4185 113.805 14.5005 110.577 14.5005 cv
107.348 14.5005 104.911 16.4185 104.911 18.687 cv
104.911 20.1665 105.718 21.2603 106.894 22.8403 cv
107.382 23.479 107.919 24.2349 108.188 25.1255 cv
106.76 25.1255 li
105.751 25.1255 105.683 24.9917 105.599 24.8071 cv
105.465 24.4868 105.263 23.5288 105.263 23.4937 cv
104.691 23.4937 li
105.297 26.3188 li
108.322 26.3188 li
108.675 26.3188 108.792 26.3188 108.792 25.9487 cv
108.792 24.7397 108.17 23.3101 107.817 22.4858 cv
107.18 21.0063 106.708 19.9146 106.708 18.6704 cv
106.708 16.2817 108.608 14.9722 110.576 14.9722 cv
112.558 14.9722 114.441 16.3003 114.441 18.6704 cv
114.441 19.9312 113.938 21.0903 113.367 22.4009 cv
112.997 23.2417 112.357 24.7212 112.357 25.9321 cv
112.357 26.3179 112.459 26.3179 112.845 26.3179 cv
115.854 26.3179 li
116.46 23.4927 li
f
126.525 28.4419 mo
126.525 28.3696 126.525 28.3228 126.121 27.9165 cv
123.14 24.9146 122.378 20.4077 122.378 16.7593 cv
122.378 12.6118 123.283 8.46436 126.216 5.48193 cv
126.525 5.1958 126.525 5.14893 126.525 5.07666 cv
126.525 4.90967 126.43 4.83838 126.289 4.83838 cv
126.049 4.83838 123.904 6.45947 122.498 9.48779 cv
121.281 12.1099 120.996 14.7573 120.996 16.7583 cv
120.996 18.6187 121.256 21.5024 122.568 24.1968 cv
123.999 27.1304 126.048 28.6802 126.288 28.6802 cv
126.429 28.6802 126.525 28.6079 126.525 28.4409 cv
f
135.897 15.52 mo
136.042 14.8999 136.589 12.7075 138.258 12.7075 cv
138.377 12.7075 138.949 12.7075 139.451 13.0161 cv
138.781 13.1353 138.305 13.7319 138.305 14.3032 cv
138.305 14.6841 138.568 15.1372 139.211 15.1372 cv
139.736 15.1372 140.5 14.7075 140.5 13.7544 cv
140.5 12.5132 139.093 12.1812 138.283 12.1812 cv
136.899 12.1812 136.065 13.4448 135.779 13.9927 cv
135.182 12.4185 133.896 12.1802 133.205 12.1802 cv
130.724 12.1802 129.365 15.2554 129.365 15.8521 cv
129.365 16.0894 129.604 16.0894 129.654 16.0894 cv
129.844 16.0894 129.915 16.0415 129.962 15.8257 cv
130.773 13.2993 132.346 12.7036 133.158 12.7036 cv
133.609 12.7036 134.443 12.9185 134.443 14.3013 cv
134.443 15.0396 134.039 16.6372 133.158 19.9741 cv
132.774 21.4517 131.94 22.4536 130.891 22.4536 cv
130.748 22.4536 130.201 22.4536 129.699 22.145 cv
130.296 22.0259 130.82 21.5249 130.82 20.8569 cv
130.82 20.2134 130.296 20.0229 129.938 20.0229 cv
129.222 20.0229 128.626 20.6431 128.626 21.4058 cv
128.626 22.5024 129.818 22.979 130.869 22.979 cv
132.441 22.979 133.299 21.3101 133.372 21.1665 cv
133.658 22.0493 134.515 22.978 135.947 22.978 cv
138.402 22.978 139.76 19.9028 139.76 19.3062 cv
139.76 19.0669 139.546 19.0669 139.474 19.0669 cv
139.26 19.0669 139.212 19.1646 139.166 19.3286 cv
138.378 21.8813 136.757 22.4517 135.994 22.4517 cv
135.063 22.4517 134.682 21.689 134.682 20.8794 cv
134.682 20.354 134.827 19.8306 135.087 18.7808 cv
135.898 15.5151 li
f
150.209 20.9575 mo
150.209 19.1069 149.99 17.7788 149.217 16.6021 cv
148.695 15.8286 147.654 15.1567 146.309 15.1567 cv
142.408 15.1567 142.408 19.7466 142.408 20.9575 cv
142.408 22.1685 142.408 26.6548 146.309 26.6548 cv
150.209 26.6548 150.209 22.1665 150.209 20.9575 cv
cp
146.309 26.186 mo
145.537 26.186 144.509 25.731 144.173 24.353 cv
143.939 23.3608 143.939 21.9829 143.939 20.7388 cv
143.939 19.5122 143.939 18.2339 144.191 17.3091 cv
144.544 15.981 145.62 15.6274 146.31 15.6274 cv
147.218 15.6274 148.091 16.1831 148.394 17.1577 cv
148.664 18.0659 148.68 19.2769 148.68 20.7388 cv
148.68 21.9829 148.68 23.2261 148.461 24.2856 cv
148.125 25.8159 146.981 26.186 146.309 26.186 cv
f
159.225 16.7593 mo
159.225 14.8999 158.963 12.0151 157.652 9.3208 cv
156.221 6.38818 154.171 4.83838 153.932 4.83838 cv
153.791 4.83838 153.695 4.93311 153.695 5.07666 cv
153.695 5.14893 153.695 5.1958 154.148 5.62549 cv
156.484 7.98389 157.843 11.7749 157.843 16.7583 cv
157.843 20.8364 156.96 25.0308 154.004 28.0356 cv
153.695 28.3218 153.695 28.3687 153.695 28.4409 cv
153.695 28.5845 153.791 28.6802 153.933 28.6802 cv
154.172 28.6802 156.317 27.0581 157.724 24.0298 cv
158.941 21.4077 159.227 18.7612 159.227 16.7583 cv
f
grestore
grestore
gsave
69 248 mo
139 248 li
139 218 li
69 218 li
69 248 li
cp
clp
gsave
68.0039 249.12 mo
140.004 249.12 li
140.004 217.12 li
68.0039 217.12 li
68.0039 249.12 li
cp
clp
85.502 218.207 mo
84.333 219.185 83.0688 219.899 81.854 219.899 cv
80.9009 219.899 80.209 219.494 79.374 219.017 cv
78.6826 218.611 77.9438 218.207 76.9912 218.207 cv
76.3936 218.207 75.7739 218.398 75.25 218.635 cv
74.772 218.874 74.2949 219.138 73.8911 219.469 cv
72.604 220.519 li
72.938 220.924 li
74.105 219.946 75.3687 219.232 76.585 219.232 cv
77.5381 219.232 78.23 219.638 79.0649 220.113 cv
79.7559 220.519 80.4951 220.924 81.4487 220.924 cv
82.0439 220.924 82.665 220.733 83.1899 220.494 cv
83.667 220.256 84.1431 219.994 84.5479 219.66 cv
85.8359 218.612 li
85.5029 218.207 li
0 0 0 1 cmyk
f
78.7842 227.048 mo
78.9507 226.381 79.0469 226.239 79.332 226.167 cv
79.5479 226.119 80.334 226.119 80.834 226.119 cv
83.2432 226.119 84.3149 226.214 84.3149 228.074 cv
84.3149 228.433 84.2197 229.361 84.124 229.982 cv
84.1006 230.077 84.0518 230.363 84.0518 230.435 cv
84.0518 230.577 84.124 230.744 84.3379 230.744 cv
84.6006 230.744 84.6489 230.553 84.6963 230.196 cv
85.3398 226.048 li
85.3628 225.953 85.3877 225.715 85.3877 225.644 cv
85.3877 225.38 85.1489 225.38 84.7437 225.38 cv
71.5107 225.38 li
70.939 225.38 70.916 225.403 70.749 225.857 cv
69.3188 230.054 li
69.2939 230.101 69.1748 230.435 69.1748 230.482 cv
69.1748 230.626 69.2939 230.744 69.4609 230.744 cv
69.7002 230.744 69.7236 230.625 69.8667 230.244 cv
71.1553 226.549 71.7729 226.119 75.3027 226.119 cv
76.2329 226.119 li
76.8999 226.119 76.8999 226.214 76.8999 226.405 cv
76.8999 226.549 76.8276 226.835 76.8052 226.907 cv
73.6099 239.638 li
73.396 240.519 73.3237 240.782 70.7729 240.782 cv
69.915 240.782 69.7729 240.782 69.7729 241.235 cv
69.7729 241.521 70.0342 241.521 70.1777 241.521 cv
70.8218 241.521 71.4893 241.474 72.1328 241.474 cv
72.7998 241.474 73.4917 241.45 74.1597 241.45 cv
74.8271 241.45 75.4961 241.474 76.1396 241.474 cv
76.8311 241.474 77.5459 241.521 78.2129 241.521 cv
78.4521 241.521 78.7378 241.521 78.7378 241.044 cv
78.7378 240.781 78.5469 240.781 77.9268 240.781 cv
77.3301 240.781 77.021 240.781 76.3999 240.733 cv
75.709 240.663 75.5186 240.591 75.5186 240.21 cv
75.5186 240.188 75.5186 240.066 75.6143 239.708 cv
78.7842 227.049 li
f
95.3311 242.295 mo
94.7588 242.295 li
94.7417 242.347 94.5898 243.136 94.4561 243.523 cv
94.356 243.792 94.3037 243.926 93.2617 243.926 cv
91.834 243.926 li
92.1201 242.985 92.6069 242.329 93.5479 241.068 cv
94.3711 239.959 95.1118 238.849 95.1118 237.487 cv
95.1118 235.218 92.6748 233.301 89.4463 233.301 cv
86.2178 233.301 83.7803 235.218 83.7803 237.487 cv
83.7803 238.967 84.5879 240.06 85.7642 241.64 cv
86.252 242.279 86.7891 243.035 87.0576 243.926 cv
85.6299 243.926 li
84.6211 243.926 84.5527 243.792 84.4688 243.607 cv
84.335 243.287 84.1328 242.329 84.1328 242.294 cv
83.561 242.294 li
84.167 245.119 li
87.1919 245.119 li
87.5449 245.119 87.6616 245.119 87.6616 244.749 cv
87.6616 243.54 87.04 242.11 86.6865 241.286 cv
86.0498 239.806 85.5776 238.714 85.5776 237.47 cv
85.5776 235.082 87.4775 233.772 89.4448 233.772 cv
91.4277 233.772 93.311 235.101 93.311 237.47 cv
93.311 238.731 92.8076 239.89 92.2358 241.201 cv
91.8662 242.042 91.2271 243.521 91.2271 244.732 cv
91.2271 245.118 91.3291 245.118 91.7148 245.118 cv
94.7236 245.118 li
95.3301 242.293 li
f
105.395 247.242 mo
105.395 247.17 105.395 247.123 104.99 246.717 cv
102.01 243.714 101.248 239.208 101.248 235.56 cv
101.248 231.412 102.153 227.265 105.086 224.282 cv
105.395 223.996 105.395 223.949 105.395 223.877 cv
105.395 223.71 105.3 223.638 105.158 223.638 cv
104.919 223.638 102.774 225.26 101.367 228.288 cv
100.151 230.91 99.8647 233.558 99.8647 235.558 cv
99.8647 237.419 100.126 240.303 101.438 242.997 cv
102.868 245.931 104.918 247.48 105.157 247.48 cv
105.299 247.48 105.395 247.408 105.395 247.241 cv
f
114.767 234.32 mo
114.911 233.7 115.459 231.507 117.128 231.507 cv
117.247 231.507 117.819 231.507 118.32 231.816 cv
117.651 231.935 117.175 232.532 117.175 233.103 cv
117.175 233.484 117.438 233.938 118.081 233.938 cv
118.606 233.938 119.369 233.507 119.369 232.554 cv
119.369 231.313 117.963 230.981 117.152 230.981 cv
115.769 230.981 114.935 232.245 114.649 232.793 cv
114.052 231.218 112.766 230.98 112.074 230.98 cv
109.594 230.98 108.235 234.056 108.235 234.652 cv
108.235 234.89 108.474 234.89 108.523 234.89 cv
108.714 234.89 108.784 234.842 108.832 234.626 cv
109.643 232.099 111.216 231.504 112.027 231.504 cv
112.479 231.504 113.313 231.718 113.313 233.101 cv
113.313 233.84 112.908 235.438 112.027 238.774 cv
111.644 240.252 110.81 241.254 109.761 241.254 cv
109.617 241.254 109.07 241.254 108.569 240.945 cv
109.166 240.826 109.689 240.325 109.689 239.657 cv
109.689 239.013 109.166 238.823 108.808 238.823 cv
108.092 238.823 107.496 239.443 107.496 240.206 cv
107.496 241.303 108.688 241.779 109.738 241.779 cv
111.311 241.779 112.169 240.11 112.241 239.966 cv
112.527 240.849 113.385 241.778 114.816 241.778 cv
117.271 241.778 118.63 238.703 118.63 238.106 cv
118.63 237.867 118.416 237.867 118.344 237.867 cv
118.13 237.867 118.082 237.964 118.035 238.129 cv
117.248 240.681 115.627 241.252 114.863 241.252 cv
113.933 241.252 113.552 240.489 113.552 239.679 cv
113.552 239.154 113.696 238.631 113.957 237.581 cv
114.768 234.315 li
f
129.079 239.757 mo
129.079 237.907 128.86 236.579 128.087 235.402 cv
127.565 234.629 126.523 233.957 125.179 233.957 cv
121.277 233.957 121.277 238.546 121.277 239.757 cv
121.277 240.968 121.277 245.455 125.179 245.455 cv
129.079 245.455 129.079 240.967 129.079 239.757 cv
cp
125.179 244.986 mo
124.406 244.986 123.379 244.531 123.043 243.153 cv
122.809 242.161 122.809 240.783 122.809 239.539 cv
122.809 238.313 122.809 237.034 123.061 236.109 cv
123.414 234.781 124.489 234.428 125.18 234.428 cv
126.088 234.428 126.961 234.983 127.264 235.958 cv
127.533 236.866 127.55 238.077 127.55 239.539 cv
127.55 240.783 127.55 242.026 127.331 243.086 cv
126.995 244.616 125.851 244.986 125.179 244.986 cv
f
138.095 235.56 mo
138.095 233.7 137.833 230.815 136.522 228.121 cv
135.091 225.188 133.041 223.638 132.802 223.638 cv
132.66 223.638 132.565 223.733 132.565 223.877 cv
132.565 223.949 132.565 223.996 133.018 224.425 cv
135.354 226.784 136.713 230.575 136.713 235.558 cv
136.713 239.636 135.83 243.831 132.874 246.836 cv
132.565 247.122 132.565 247.169 132.565 247.241 cv
132.565 247.385 132.66 247.48 132.803 247.48 cv
133.042 247.48 135.187 245.858 136.594 242.83 cv
137.811 240.208 138.097 237.562 138.097 235.558 cv
f
grestore
grestore
gsave
361 137 mo
383 137 li
383 122 li
361 122 li
361 137 li
cp
clp
gsave
360.004 138.12 mo
384.004 138.12 li
384.004 121.12 li
360.004 121.12 li
360.004 138.12 li
cp
clp
368.566 125.521 mo
368.711 124.9 369.259 122.707 370.928 122.707 cv
371.047 122.707 371.619 122.707 372.12 123.017 cv
371.451 123.135 370.975 123.732 370.975 124.303 cv
370.975 124.685 371.238 125.138 371.881 125.138 cv
372.406 125.138 373.169 124.707 373.169 123.754 cv
373.169 122.513 371.763 122.181 370.952 122.181 cv
369.568 122.181 368.734 123.445 368.449 123.993 cv
367.852 122.418 366.566 122.181 365.874 122.181 cv
363.394 122.181 362.035 125.255 362.035 125.853 cv
362.035 126.089 362.273 126.089 362.323 126.089 cv
362.514 126.089 362.584 126.042 362.632 125.826 cv
363.443 123.299 365.016 122.704 365.827 122.704 cv
366.279 122.704 367.113 122.918 367.113 124.301 cv
367.113 125.04 366.708 126.638 365.827 129.974 cv
365.443 131.452 364.609 132.454 363.561 132.454 cv
363.417 132.454 362.87 132.454 362.369 132.146 cv
362.966 132.026 363.489 131.525 363.489 130.857 cv
363.489 130.213 362.966 130.023 362.607 130.023 cv
361.892 130.023 361.296 130.644 361.296 131.406 cv
361.296 132.503 362.488 132.979 363.538 132.979 cv
365.111 132.979 365.969 131.31 366.041 131.166 cv
366.327 132.049 367.185 132.978 368.616 132.978 cv
371.071 132.978 372.43 129.903 372.43 129.306 cv
372.43 129.067 372.216 129.067 372.144 129.067 cv
371.93 129.067 371.882 129.164 371.835 129.329 cv
371.048 131.881 369.427 132.452 368.663 132.452 cv
367.732 132.452 367.352 131.689 367.352 130.879 cv
367.352 130.354 367.496 129.831 367.757 128.781 cv
368.568 125.515 li
0 0 0 1 cmyk
f
382.979 130.957 mo
382.979 129.107 382.76 127.779 381.986 126.603 cv
381.465 125.829 380.423 125.157 379.079 125.157 cv
375.177 125.157 375.177 129.746 375.177 130.957 cv
375.177 132.168 375.177 136.655 379.079 136.655 cv
382.979 136.655 382.979 132.167 382.979 130.957 cv
cp
379.079 136.187 mo
378.306 136.187 377.279 135.731 376.943 134.353 cv
376.709 133.361 376.709 131.983 376.709 130.739 cv
376.709 129.513 376.709 128.234 376.961 127.31 cv
377.314 125.981 378.389 125.628 379.08 125.628 cv
379.988 125.628 380.861 126.183 381.164 127.158 cv
381.433 128.066 381.45 129.277 381.45 130.739 cv
381.45 131.983 381.45 133.226 381.23 134.286 cv
380.895 135.816 379.751 136.187 379.079 136.187 cv
f
grestore
grestore
gsave
175.1 117.38 mo
197.1 117.38 li
197.1 102.38 li
175.1 102.38 li
175.1 117.38 li
cp
clp
gsave
174.104 118.5 mo
198.104 118.5 li
198.104 101.5 li
174.104 101.5 li
174.104 118.5 li
cp
clp
182.667 105.9 mo
182.811 105.28 183.359 103.087 185.028 103.087 cv
185.147 103.087 185.719 103.087 186.22 103.396 cv
185.551 103.515 185.075 104.112 185.075 104.683 cv
185.075 105.064 185.338 105.518 185.981 105.518 cv
186.506 105.518 187.269 105.087 187.269 104.134 cv
187.269 102.893 185.863 102.561 185.052 102.561 cv
183.668 102.561 182.834 103.825 182.549 104.373 cv
181.952 102.798 180.667 102.561 179.974 102.561 cv
177.494 102.561 176.135 105.635 176.135 106.232 cv
176.135 106.469 176.374 106.469 176.423 106.469 cv
176.614 106.469 176.684 106.422 176.732 106.206 cv
177.543 103.679 179.116 103.084 179.927 103.084 cv
180.379 103.084 181.213 103.298 181.213 104.681 cv
181.213 105.42 180.808 107.018 179.927 110.354 cv
179.543 111.832 178.709 112.834 177.661 112.834 cv
177.517 112.834 176.97 112.834 176.469 112.525 cv
177.066 112.406 177.589 111.905 177.589 111.237 cv
177.589 110.593 177.066 110.403 176.708 110.403 cv
175.992 110.403 175.396 111.023 175.396 111.786 cv
175.396 112.883 176.588 113.359 177.638 113.359 cv
179.211 113.359 180.069 111.689 180.141 111.546 cv
180.427 112.429 181.285 113.357 182.716 113.357 cv
185.171 113.357 186.53 110.283 186.53 109.686 cv
186.53 109.447 186.316 109.447 186.244 109.447 cv
186.03 109.447 185.982 109.544 185.935 109.709 cv
185.148 112.261 183.527 112.832 182.763 112.832 cv
181.833 112.832 181.452 112.069 181.452 111.259 cv
181.452 110.734 181.596 110.211 181.857 109.161 cv
182.668 105.895 li
0 0 0 1 cmyk
f
197.079 111.337 mo
197.079 109.487 196.86 108.159 196.086 106.982 cv
195.565 106.209 194.523 105.537 193.179 105.537 cv
189.277 105.537 189.277 110.126 189.277 111.337 cv
189.277 112.548 189.277 117.035 193.179 117.035 cv
197.079 117.035 197.079 112.547 197.079 111.337 cv
cp
193.179 116.566 mo
192.406 116.566 191.379 116.111 191.043 114.732 cv
190.809 113.741 190.809 112.363 190.809 111.119 cv
190.809 109.893 190.809 108.614 191.061 107.689 cv
191.415 106.361 192.489 106.008 193.18 106.008 cv
194.088 106.008 194.961 106.563 195.264 107.538 cv
195.533 108.446 195.55 109.657 195.55 111.119 cv
195.55 112.363 195.55 113.605 195.331 114.666 cv
194.995 116.196 193.851 116.566 193.179 116.566 cv
f
grestore
grestore
gsave
150.13 194.38 mo
166.13 194.38 li
166.13 176.38 li
150.13 176.38 li
150.13 194.38 li
cp
clp
gsave
149.134 195.5 mo
167.134 195.5 li
167.134 175.5 li
149.134 175.5 li
149.134 195.5 li
cp
clp
165.875 189.637 mo
165.279 189.637 li
165.16 190.257 165.064 190.806 164.85 191.378 cv
164.73 191.759 164.66 191.95 163.277 191.95 cv
161.37 191.95 li
161.678 190.616 162.417 189.47 163.492 187.896 cv
164.611 186.205 165.589 184.559 165.589 182.677 cv
165.589 179.363 162.371 176.693 158.341 176.693 cv
154.242 176.693 151.07 179.41 151.07 182.677 cv
151.07 184.561 152.047 186.205 153.167 187.896 cv
154.217 189.47 154.98 190.616 155.29 191.95 cv
153.383 191.95 li
152 191.95 151.928 191.759 151.808 191.402 cv
151.617 190.854 151.5 190.235 151.38 189.638 cv
150.783 189.638 li
151.572 193.5 li
155.385 193.5 li
155.911 193.5 155.982 193.5 155.982 193 cv
155.982 191.331 155.244 189.232 154.695 187.706 cv
154.193 186.323 153.527 184.439 153.527 182.653 cv
153.527 178.837 156.148 177.217 158.318 177.217 cv
160.607 177.217 163.134 178.933 163.134 182.653 cv
163.134 184.439 162.49 186.253 161.8 188.208 cv
161.442 189.21 160.68 191.355 160.68 193 cv
160.68 193.5 160.75 193.5 161.299 193.5 cv
165.09 193.5 li
165.878 189.637 li
0 0 0 1 cmyk
f
grestore
grestore
gsave
398.184 186.88 mo
414.184 186.88 li
414.184 168.88 li
398.184 168.88 li
398.184 186.88 li
cp
clp
gsave
397.188 188 mo
415.188 188 li
415.188 168 li
397.188 168 li
397.188 188 li
cp
clp
413.929 182.137 mo
413.332 182.137 li
413.213 182.757 413.117 183.306 412.903 183.878 cv
412.783 184.259 412.713 184.45 411.33 184.45 cv
409.423 184.45 li
409.731 183.116 410.471 181.97 411.545 180.396 cv
412.664 178.705 413.643 177.059 413.643 175.177 cv
413.643 171.863 410.424 169.193 406.395 169.193 cv
402.295 169.193 399.123 171.91 399.123 175.177 cv
399.123 177.061 400.101 178.705 401.221 180.396 cv
402.271 181.97 403.033 183.116 403.343 184.45 cv
401.437 184.45 li
400.054 184.45 399.981 184.259 399.861 183.902 cv
399.67 183.354 399.553 182.735 399.434 182.138 cv
398.836 182.138 li
399.625 186 li
403.438 186 li
403.964 186 404.035 186 404.035 185.5 cv
404.035 183.831 403.297 181.732 402.748 180.206 cv
402.246 178.823 401.58 176.939 401.58 175.153 cv
401.58 171.337 404.201 169.717 406.371 169.717 cv
408.66 169.717 411.188 171.433 411.188 175.153 cv
411.188 176.939 410.543 178.753 409.854 180.708 cv
409.495 181.71 408.733 183.855 408.733 185.5 cv
408.733 186 408.804 186 409.353 186 cv
413.144 186 li
413.932 182.137 li
0 0 0 1 cmyk
f
grestore
grestore
gsave
280.655 59.5068 mo
353.654 59.5068 li
353.654 34.5068 li
280.655 34.5068 li
280.655 59.5068 li
cp
clp
gsave
279.659 60.627 mo
354.658 60.627 li
354.658 33.627 li
279.659 33.627 li
279.659 60.627 li
cp
clp
298.854 37.0684 mo
298.902 36.998 298.974 36.8301 298.974 36.7344 cv
298.974 36.5684 298.949 36.5439 298.401 36.5439 cv
281.951 36.5439 li
281.403 36.5439 281.379 36.5664 281.379 36.7344 cv
281.379 36.8301 281.451 36.9971 281.498 37.0684 cv
289.532 53.1621 li
289.699 53.4707 289.771 53.6152 290.177 53.6152 cv
290.582 53.6152 290.654 53.4707 290.82 53.1621 cv
298.854 37.0684 li
cp
284.336 38.2598 mo
297.425 38.2598 li
290.892 51.3721 li
284.336 38.2588 li
0 0 0 1 cmyk
f
311.489 43.8389 mo
311.513 43.6953 311.56 43.5762 311.56 43.4092 cv
311.56 43.0039 311.273 42.7646 310.868 42.7646 cv
310.629 42.7646 309.985 42.9316 309.89 43.79 cv
309.462 42.9092 308.628 42.2881 307.673 42.2881 cv
304.956 42.2881 302 45.625 302 49.0576 cv
302 51.4189 303.455 52.8252 305.17 52.8252 cv
306.576 52.8252 307.698 51.7051 307.937 51.4414 cv
307.959 51.4648 li
307.459 53.5869 307.173 54.5645 307.173 54.6123 cv
307.078 54.8281 306.267 57.1875 303.74 57.1875 cv
303.287 57.1875 302.499 57.1641 301.832 56.9492 cv
302.548 56.7324 302.811 56.1152 302.811 55.708 cv
302.811 55.3271 302.548 54.874 301.904 54.874 cv
301.379 54.874 300.617 55.3037 300.617 56.2568 cv
300.617 57.2344 301.498 57.7119 303.787 57.7119 cv
306.767 57.7119 308.484 55.8535 308.842 54.4209 cv
311.489 43.8369 li
311.489 43.8389 li
cp
308.39 49.7754 mo
308.245 50.3945 307.698 50.9912 307.173 51.4443 cv
306.671 51.874 305.933 52.3018 305.242 52.3018 cv
304.05 52.3018 303.692 51.0625 303.692 50.1094 cv
303.692 48.9648 304.384 46.1523 305.028 44.9375 cv
305.672 43.7676 306.697 42.8145 307.698 42.8145 cv
309.271 42.8145 309.604 44.7451 309.604 44.8652 cv
309.604 44.9844 309.558 45.127 309.532 45.2227 cv
308.388 49.7754 li
f
320.351 58.5488 mo
320.351 58.4766 320.351 58.4297 319.945 58.0234 cv
316.965 55.0215 316.203 50.5146 316.203 46.8662 cv
316.203 42.7188 317.108 38.5713 320.041 35.5889 cv
320.351 35.3027 320.351 35.2559 320.351 35.1836 cv
320.351 35.0166 320.255 34.9453 320.113 34.9453 cv
319.874 34.9453 317.729 36.5664 316.322 39.5947 cv
315.106 42.2168 314.82 44.8643 314.82 46.8652 cv
314.82 48.7256 315.081 51.6094 316.394 54.3037 cv
317.823 57.2373 319.873 58.7871 320.112 58.7871 cv
320.254 58.7871 320.351 58.7148 320.351 58.5479 cv
f
329.721 45.627 mo
329.865 45.0068 330.414 42.8145 332.082 42.8145 cv
332.201 42.8145 332.773 42.8145 333.275 43.123 cv
332.605 43.2422 332.129 43.8389 332.129 44.4102 cv
332.129 44.791 332.393 45.2441 333.035 45.2441 cv
333.561 45.2441 334.324 44.8145 334.324 43.8613 cv
334.324 42.6201 332.918 42.2881 332.107 42.2881 cv
330.723 42.2881 329.889 43.5518 329.604 44.0996 cv
329.006 42.5254 327.721 42.2871 327.029 42.2871 cv
324.549 42.2871 323.19 45.3623 323.19 45.959 cv
323.19 46.1963 323.429 46.1963 323.479 46.1963 cv
323.669 46.1963 323.739 46.1484 323.787 45.9326 cv
324.599 43.4063 326.17 42.8105 326.982 42.8105 cv
327.434 42.8105 328.268 43.0254 328.268 44.4082 cv
328.268 45.1465 327.863 46.7441 326.982 50.0811 cv
326.598 51.5586 325.764 52.5605 324.716 52.5605 cv
324.572 52.5605 324.025 52.5605 323.524 52.252 cv
324.121 52.1328 324.645 51.6318 324.645 50.9639 cv
324.645 50.3203 324.121 50.1299 323.763 50.1299 cv
323.047 50.1299 322.451 50.75 322.451 51.5127 cv
322.451 52.6094 323.644 53.0859 324.693 53.0859 cv
326.266 53.0859 327.123 51.417 327.195 51.2734 cv
327.482 52.1563 328.34 53.085 329.771 53.085 cv
332.227 53.085 333.584 50.0098 333.584 49.4131 cv
333.584 49.1738 333.371 49.1738 333.299 49.1738 cv
333.084 49.1738 333.037 49.2715 332.99 49.4355 cv
332.203 51.9883 330.582 52.5586 329.818 52.5586 cv
328.887 52.5586 328.506 51.7959 328.506 50.9863 cv
328.506 50.4609 328.65 49.9375 328.912 48.8877 cv
329.723 45.6221 li
f
344.133 51.0645 mo
344.133 49.2139 343.914 47.8857 343.141 46.709 cv
342.619 45.9355 341.578 45.2637 340.234 45.2637 cv
336.332 45.2637 336.332 49.8535 336.332 51.0645 cv
336.332 52.2754 336.332 56.7617 340.234 56.7617 cv
344.133 56.7617 344.133 52.2734 344.133 51.0645 cv
cp
340.234 56.293 mo
339.461 56.293 338.434 55.8379 338.098 54.46 cv
337.863 53.4678 337.863 52.0898 337.863 50.8457 cv
337.863 49.6191 337.863 48.3408 338.115 47.416 cv
338.469 46.0879 339.543 45.7344 340.234 45.7344 cv
341.143 45.7344 342.016 46.29 342.318 47.2646 cv
342.588 48.1729 342.605 49.3838 342.605 50.8457 cv
342.605 52.0898 342.605 53.333 342.385 54.3926 cv
342.049 55.9229 340.906 56.293 340.234 56.293 cv
f
353.049 46.8662 mo
353.049 45.0068 352.787 42.1221 351.477 39.4277 cv
350.045 36.4951 347.996 34.9453 347.756 34.9453 cv
347.615 34.9453 347.52 35.04 347.52 35.1836 cv
347.52 35.2559 347.52 35.3027 347.973 35.7324 cv
350.309 38.0908 351.668 41.8818 351.668 46.8652 cv
351.668 50.9434 350.785 55.1377 347.828 58.1426 cv
347.52 58.4287 347.52 58.4756 347.52 58.5479 cv
347.52 58.6914 347.615 58.7871 347.758 58.7871 cv
347.996 58.7871 350.141 57.165 351.549 54.1367 cv
352.766 51.5146 353.051 48.8682 353.051 46.8652 cv
f
grestore
grestore
gsave
75 153.5 mo
150 153.5 li
150 128.5 li
75 128.5 li
75 153.5 li
cp
clp
gsave
74.0039 154.62 mo
151.004 154.62 li
151.004 127.62 li
74.0039 127.62 li
74.0039 154.62 li
cp
clp
93.1987 131.062 mo
93.2471 130.991 93.3188 130.823 93.3188 130.728 cv
93.3188 130.562 93.2939 130.537 92.7461 130.537 cv
76.2959 130.537 li
75.748 130.537 75.7236 130.56 75.7236 130.728 cv
75.7236 130.823 75.7959 130.99 75.8428 131.062 cv
83.877 147.155 li
84.0439 147.464 84.1162 147.608 84.521 147.608 cv
84.9268 147.608 84.999 147.464 85.165 147.155 cv
93.1987 131.062 li
cp
78.6807 132.253 mo
91.77 132.253 li
85.2368 145.365 li
78.6807 132.252 li
0 0 0 1 cmyk
f
103.354 137.284 mo
105.404 137.284 li
105.881 137.284 106.12 137.284 106.12 136.808 cv
106.12 136.544 105.881 136.544 105.476 136.544 cv
103.496 136.544 li
103.998 133.825 li
104.093 133.325 104.426 131.633 104.57 131.345 cv
104.784 130.894 105.19 130.536 105.69 130.536 cv
105.785 130.536 106.406 130.536 106.859 130.964 cv
105.809 131.06 105.572 131.894 105.572 132.251 cv
105.572 132.799 106 133.085 106.453 133.085 cv
107.073 133.085 107.766 132.563 107.766 131.655 cv
107.766 130.558 106.669 130.01 105.691 130.01 cv
104.88 130.01 103.379 130.44 102.663 132.799 cv
102.521 133.301 102.449 133.538 101.877 136.543 cv
100.232 136.543 li
99.7788 136.543 99.5161 136.543 99.5161 136.996 cv
99.5161 137.282 99.7319 137.282 100.183 137.282 cv
101.756 137.282 li
99.9688 146.699 li
99.5391 149.011 99.1348 151.181 97.896 151.181 cv
97.8008 151.181 97.2041 151.181 96.751 150.752 cv
97.8481 150.681 98.0615 149.822 98.0615 149.464 cv
98.0615 148.916 97.6338 148.63 97.1807 148.63 cv
96.561 148.63 95.8701 149.153 95.8701 150.06 cv
95.8701 151.133 96.918 151.705 97.897 151.705 cv
99.208 151.705 100.161 150.299 100.591 149.392 cv
101.354 147.89 101.902 145.004 101.925 144.839 cv
103.356 137.281 li
f
116.795 152.542 mo
116.795 152.47 116.795 152.423 116.39 152.017 cv
113.41 149.015 112.648 144.508 112.648 140.859 cv
112.648 136.712 113.553 132.564 116.486 129.582 cv
116.795 129.296 116.795 129.249 116.795 129.177 cv
116.795 129.01 116.7 128.938 116.558 128.938 cv
116.319 128.938 114.174 130.56 112.767 133.588 cv
111.551 136.21 111.265 138.857 111.265 140.858 cv
111.265 142.719 111.526 145.603 112.838 148.297 cv
114.268 151.23 116.318 152.78 116.557 152.78 cv
116.699 152.78 116.795 152.708 116.795 152.541 cv
f
126.167 139.62 mo
126.311 139 126.859 136.808 128.528 136.808 cv
128.647 136.808 129.219 136.808 129.72 137.116 cv
129.051 137.235 128.575 137.832 128.575 138.403 cv
128.575 138.784 128.838 139.237 129.481 139.237 cv
130.006 139.237 130.769 138.808 130.769 137.854 cv
130.769 136.613 129.363 136.281 128.552 136.281 cv
127.169 136.281 126.335 137.545 126.049 138.093 cv
125.452 136.519 124.166 136.28 123.474 136.28 cv
120.994 136.28 119.635 139.355 119.635 139.952 cv
119.635 140.189 119.874 140.189 119.923 140.189 cv
120.114 140.189 120.184 140.142 120.232 139.926 cv
121.043 137.399 122.616 136.804 123.427 136.804 cv
123.879 136.804 124.713 137.019 124.713 138.401 cv
124.713 139.14 124.308 140.737 123.427 144.074 cv
123.044 145.552 122.21 146.554 121.161 146.554 cv
121.017 146.554 120.47 146.554 119.969 146.245 cv
120.566 146.126 121.089 145.625 121.089 144.957 cv
121.089 144.313 120.566 144.123 120.208 144.123 cv
119.492 144.123 118.896 144.743 118.896 145.506 cv
118.896 146.603 120.088 147.079 121.138 147.079 cv
122.711 147.079 123.569 145.41 123.641 145.267 cv
123.927 146.149 124.785 147.078 126.216 147.078 cv
128.671 147.078 130.03 144.003 130.03 143.406 cv
130.03 143.167 129.816 143.167 129.744 143.167 cv
129.53 143.167 129.482 143.265 129.435 143.429 cv
128.648 145.981 127.027 146.552 126.263 146.552 cv
125.333 146.552 124.952 145.789 124.952 144.979 cv
124.952 144.454 125.096 143.931 125.357 142.881 cv
126.168 139.615 li
f
140.479 145.058 mo
140.479 143.207 140.26 141.879 139.487 140.702 cv
138.965 139.929 137.923 139.257 136.579 139.257 cv
132.677 139.257 132.677 143.847 132.677 145.058 cv
132.677 146.269 132.677 150.755 136.579 150.755 cv
140.479 150.755 140.479 146.267 140.479 145.058 cv
cp
136.579 150.286 mo
135.806 150.286 134.779 149.831 134.443 148.453 cv
134.209 147.461 134.209 146.083 134.209 144.839 cv
134.209 143.612 134.209 142.334 134.461 141.409 cv
134.814 140.081 135.889 139.728 136.58 139.728 cv
137.488 139.728 138.361 140.283 138.664 141.258 cv
138.933 142.166 138.95 143.377 138.95 144.839 cv
138.95 146.083 138.95 147.326 138.731 148.386 cv
138.395 149.916 137.251 150.286 136.579 150.286 cv
f
149.395 140.859 mo
149.395 139 149.133 136.115 147.822 133.421 cv
146.391 130.488 144.341 128.938 144.102 128.938 cv
143.96 128.938 143.865 129.033 143.865 129.177 cv
143.865 129.249 143.865 129.296 144.318 129.726 cv
146.654 132.084 148.013 135.875 148.013 140.858 cv
148.013 144.937 147.13 149.131 144.174 152.136 cv
143.865 152.422 143.865 152.469 143.865 152.541 cv
143.865 152.685 143.96 152.78 144.103 152.78 cv
144.342 152.78 146.487 151.158 147.894 148.13 cv
149.111 145.508 149.397 142.861 149.397 140.858 cv
f
grestore
grestore
0 lc
0 lj
156.716 97.2622 mo
215.573 61.3145 li
@
214.378 62.0439 mo
211.455 60.5371 li
211.503 60.4326 li
216.363 59.5977 li
217.909 59.0649 219.455 58.5327 221 58 cv
219.821 59.1323 218.641 60.2637 217.462 61.3965 cv
214.5 65.3379 li
214.393 65.3477 li
214.378 62.0439 li
cp
f
gsave
184.5 48.5 mo
257.5 48.5 li
257.5 23.5 li
184.5 23.5 li
184.5 48.5 li
cp
clp
gsave
183.504 49.6201 mo
258.503 49.6201 li
258.503 22.6201 li
183.504 22.6201 li
183.504 49.6201 li
cp
clp
202.7 26.0615 mo
202.748 25.9912 202.819 25.8232 202.819 25.7275 cv
202.819 25.5615 202.794 25.5371 202.247 25.5371 cv
185.796 25.5371 li
185.249 25.5371 185.224 25.5596 185.224 25.7275 cv
185.224 25.8232 185.296 25.9902 185.343 26.0615 cv
193.377 42.1553 li
193.544 42.4639 193.617 42.6084 194.022 42.6084 cv
194.427 42.6084 194.5 42.4639 194.666 42.1553 cv
202.7 26.0615 li
cp
188.181 27.2529 mo
201.27 27.2529 li
194.737 40.3652 li
188.181 27.252 li
0 0 0 1 cmyk
f
215.334 32.832 mo
215.358 32.6885 215.405 32.5693 215.405 32.4023 cv
215.405 31.9971 215.119 31.7578 214.713 31.7578 cv
214.474 31.7578 213.831 31.9248 213.735 32.7832 cv
213.307 31.9023 212.473 31.2813 211.518 31.2813 cv
208.801 31.2813 205.845 34.6182 205.845 38.0508 cv
205.845 40.4121 207.3 41.8184 209.015 41.8184 cv
210.421 41.8184 211.543 40.6982 211.782 40.4346 cv
211.804 40.458 li
211.304 42.5801 211.018 43.5576 211.018 43.6055 cv
210.923 43.8213 210.112 46.1807 207.585 46.1807 cv
207.132 46.1807 206.344 46.1572 205.677 45.9424 cv
206.393 45.7256 206.656 45.1084 206.656 44.7012 cv
206.656 44.3203 206.393 43.8672 205.75 43.8672 cv
205.224 43.8672 204.462 44.2969 204.462 45.25 cv
204.462 46.2275 205.343 46.7051 207.632 46.7051 cv
210.612 46.7051 212.33 44.8467 212.687 43.4141 cv
215.334 32.8301 li
215.334 32.832 li
cp
212.235 38.7686 mo
212.09 39.3877 211.543 39.9844 211.018 40.4375 cv
210.516 40.8672 209.778 41.2949 209.087 41.2949 cv
207.895 41.2949 207.538 40.0557 207.538 39.1025 cv
207.538 37.958 208.229 35.1455 208.874 33.9307 cv
209.517 32.7607 210.542 31.8076 211.543 31.8076 cv
213.117 31.8076 213.45 33.7383 213.45 33.8584 cv
213.45 33.9775 213.403 34.1201 213.377 34.2158 cv
212.233 38.7686 li
f
224.196 47.542 mo
224.196 47.4697 224.196 47.4229 223.791 47.0166 cv
220.81 44.0146 220.048 39.5078 220.048 35.8594 cv
220.048 31.7119 220.954 27.5645 223.886 24.582 cv
224.196 24.2959 224.196 24.249 224.196 24.1768 cv
224.196 24.0098 224.1 23.9385 223.958 23.9385 cv
223.719 23.9385 221.575 25.5596 220.167 28.5879 cv
218.952 31.21 218.666 33.8574 218.666 35.8584 cv
218.666 37.7188 218.926 40.6025 220.239 43.2969 cv
221.668 46.2305 223.718 47.7803 223.958 47.7803 cv
224.099 47.7803 224.196 47.708 224.196 47.541 cv
f
233.566 34.6201 mo
233.71 34 234.259 31.8076 235.927 31.8076 cv
236.046 31.8076 236.619 31.8076 237.121 32.1162 cv
236.451 32.2354 235.974 32.832 235.974 33.4033 cv
235.974 33.7842 236.238 34.2373 236.88 34.2373 cv
237.406 34.2373 238.169 33.8076 238.169 32.8545 cv
238.169 31.6133 236.763 31.2813 235.953 31.2813 cv
234.568 31.2813 233.734 32.5449 233.449 33.0928 cv
232.851 31.5186 231.566 31.2803 230.875 31.2803 cv
228.394 31.2803 227.036 34.3555 227.036 34.9521 cv
227.036 35.1895 227.274 35.1895 227.324 35.1895 cv
227.514 35.1895 227.584 35.1416 227.632 34.9258 cv
228.444 32.3994 230.015 31.8037 230.828 31.8037 cv
231.279 31.8037 232.113 32.0186 232.113 33.4014 cv
232.113 34.1396 231.708 35.7373 230.828 39.0742 cv
230.443 40.5518 229.609 41.5537 228.561 41.5537 cv
228.417 41.5537 227.871 41.5537 227.37 41.2451 cv
227.966 41.126 228.49 40.625 228.49 39.957 cv
228.49 39.3135 227.966 39.123 227.608 39.123 cv
226.892 39.123 226.296 39.7432 226.296 40.5059 cv
226.296 41.6025 227.489 42.0791 228.539 42.0791 cv
230.111 42.0791 230.968 40.4102 231.041 40.2666 cv
231.328 41.1494 232.185 42.0781 233.617 42.0781 cv
236.072 42.0781 237.429 39.0029 237.429 38.4063 cv
237.429 38.167 237.216 38.167 237.144 38.167 cv
236.929 38.167 236.882 38.2646 236.835 38.4287 cv
236.048 40.9814 234.427 41.5518 233.664 41.5518 cv
232.732 41.5518 232.351 40.7891 232.351 39.9795 cv
232.351 39.4541 232.496 38.9307 232.757 37.8809 cv
233.568 34.6152 li
f
247.978 40.0576 mo
247.978 38.207 247.759 36.8789 246.986 35.7021 cv
246.464 34.9287 245.423 34.2568 244.08 34.2568 cv
240.177 34.2568 240.177 38.8467 240.177 40.0576 cv
240.177 41.2686 240.177 45.7549 244.08 45.7549 cv
247.978 45.7549 247.978 41.2666 247.978 40.0576 cv
cp
244.08 45.2861 mo
243.306 45.2861 242.279 44.8311 241.943 43.4531 cv
241.708 42.4609 241.708 41.083 241.708 39.8389 cv
241.708 38.6123 241.708 37.334 241.96 36.4092 cv
242.314 35.0811 243.388 34.7275 244.08 34.7275 cv
244.988 34.7275 245.861 35.2832 246.164 36.2578 cv
246.433 37.166 246.451 38.377 246.451 39.8389 cv
246.451 41.083 246.451 42.3262 246.23 43.3857 cv
245.894 44.916 244.751 45.2861 244.08 45.2861 cv
f
256.894 35.8594 mo
256.894 34 256.632 31.1152 255.322 28.4209 cv
253.89 25.4883 251.841 23.9385 251.601 23.9385 cv
251.46 23.9385 251.365 24.0332 251.365 24.1768 cv
251.365 24.249 251.365 24.2959 251.818 24.7256 cv
254.154 27.084 255.513 30.875 255.513 35.8584 cv
255.513 39.9365 254.63 44.1309 251.673 47.1357 cv
251.365 47.4219 251.365 47.4688 251.365 47.541 cv
251.365 47.6846 251.46 47.7803 251.603 47.7803 cv
251.841 47.7803 253.986 46.1582 255.394 43.1299 cv
256.611 40.5078 256.896 37.8613 256.896 35.8584 cv
f
grestore
grestore
157.716 96.1309 mo
119.465 120.354 li
@
113.5 124.131 mo
119.73 115.374 li
119.911 120.071 li
124.08 122.242 li
113.5 124.131 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.4%%For: (Marco F. Duarte) ()%%Title: (fig2)%%CreationDate: 4/23/13 4:29 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6GCM)(cR=+S!8dg?OH9[q96t:9AYo-S"HouUJ5CE7s#?YL9(mML1JFRFq`O&5ZhA;Nd!0)*P%@4nluY;Gl8Pd:k"!/YcUq)7%`2'=L8PM(*MPqiLl.u2=XW(-7fQuk5f:'D%:@#%5m1rlb<i<Qm/Gr^d-BBVun>)5[XYh$!^Q\I_jm=R\hVM2'bOn?,h!08gH:^uV%$4%?BkBt&$W#k]J?Yc3tUh5JiQCeK+b:_]S[.kZXqX`Q&5gF/Y*jcA+"<?[CdHptl%Y//6<KKWDX6HKnaQ/7%8J6D*"]83]RJX>E%8%m[C<-n4<o5WWeZdWZ==#s]E)#c;o+fPbLI<JKbDDs&Y)BjoQRTVKs$Nbc<hlW'g92Z,^';_M-C.Zr0kVJ!3[D2"7^K6T1[7[jX%U#anpoZle&;aYj]:c8'E:X8fr>3E1omm5,B"IYK<8$-O.!Ti_CbDjZ"eTsL=I*r'4Q-Mn%#Ma/RqUk6Ollpi\oKTGT>=0`p["=Kb%Xa/=*,->*.'f0PR3ZsVs6%a's;GtpKIKb2CZ<a<jHrA1E#I,uT3j@rbR!@&YJ(0r<<o`i8SPHl`0NOO'#5o\3cPkU=-MsDn'`-VN%eXBOV6(eQTS:CmuUN9VT`@&`/ZVj;F8Kc5L&t"j-K,c_+Q!S#*`S1BIr0,A)gT,H1B`\4T14EsVI[VU4(((I"bP5/)nYn)";d#tn%b@Q'j^85OG9%39rVI:oJ_buq(/i0#pM.K?obF%c0h_n1[AXZ^.^YpQ+.MT*dTn%%s$M^Dn^bY",4tW*Y%Gre)nThZ=hk;X!mA93D%2:ADt-@7AgM)9Zj.I7^s@O^XWlR@7:4i0uGK0@(Ilo1[BI2Dd6TD/e@KV+'WdYVGQ*oSL?)uh)rqh0)iC=;s`'_Vo!YtV]e0ZG2N%3MeI,,,Gp$dPkmdC$TKfC"m=gfQ+tV<eC=g;V4536qiht[+FpfjV\!9;V44R@7h:20(of?nJCnZnfL)1b7T>u=:4q\T9P758gmtZ%rE(;.!Gjc[+3$+j5"]rK7HqhU6@2I3O"I9sU@hF.N*ippqhJaeG>'csGPF)`21:A\_bVgPjW"(eBgU^r:Fq.39;ItdZ`ukH7r+dG%c"*3`$BmAa3L(:.$Z''%Sl3/KekrHrH7@[SjbtFcDm\n6MUbJ,e+`*JqN&(TN_CqIPin8h'LS;dU[m`0G5=rXbsn`iZ5B,Pfr*9C%jPH"`I+sc,2UWTu1FbJ6^_SXsinFr#=BepT=hPM&I8^g`ndkauXXIBQ,`+^)rmH9UF5]@H0E%5.X"&f_J*B1'Vn\e;oUfR=hhJu4%2QVD_g[p?oQi>1kl#5`<rKg%kM\P1KV>j.6qV1g=rsAB`Wm?fOpdt9RJ$WMS0D&%<$Ar">RR"]+A)#@gpdq*@Daa\ukf%R>,7qPe%8ur/9#+l/^/$#'D+YX(.WW^<!42-JG<!iTagY4EK&Zj&0K=sQj@iJN3-k=1P^XsL*7,G@UM/OPr^5m7.%eqF^p($>F6#k;].8Ke2%nWVj!6++ib:-ZfYNV*p_-JHs(=b#csl$&eWUpJoS349Cq9n/GO$o>k'/rBgjHKB"ESa9XX)l8<ao.k_aEE\O7^Ql&V=rY2tE+6R"%#;%L&`KH68$Dl81q2T]69;(^I<3Z4#FP9%N;uShJ`c(JUXblb@848lSa5RSm1l`c3@=9X>q,+9*%D.B!p.Z5=V0IGeR;i"RE_\&S%qp3D`.&2g?@tusEMGfGb-Ri*r9,>i!Sstrc85G$7pbo7t/]SR?Rs,Y:Miu=b(ro)=>uD^=T_KLsN8dfW)(heoY^S@q3d"Y:\L<c6%f&LgKYp?_*b-\To@t73`B*9u[XFF22YS$6/M&Y,:d?3#n_a1hioHSLbZ)"XEj`$'?/;;K<;392\V9p,<NdIkJ<)TEC8]M9cgW^fq%RMdF(=ChAMoF/Hd/OtX$Hn(m/Hcp<1NLc(T`]5blBa:,>Hja%NN73IZ6r-Z?TH"UR:VS2G,Ak&b3V$!c1pU5,3,?W7JSB+1#2"0p%cRk1!?>\cMMX!f,6Agra:_S:l[,6o1;9gjfdb^2^A2_=r[QYHYh*Sg`%R1j0882:g*PIH>EjVR!4!qu]bo5h%SR7ahZ.:&J*2pJM%7Ph)8-IXAD8_"k.Q?51c@N=K6mYi?ES'YD_FGIaid@0Sn196#n>+1?krDq+4OiZCEq/OH^/CU/?8Rg,bHGM!ppr?u$X(D#"[BWQq%i)#EUYL@6!HoQEUSo$Q28>J])?'<ear%(+J0g/>%kYs'YC=-kndiC"#\)s.8;'VF_D`MkqPAZN-SMgZ)W8otYqTnGKA-]hcgLJO;%Y8l;Jej_C)>EA5UcXaYS$>[2nB('T:AXp;saXF'P)=G/4>=?S-3S&5+i_7WLH\1]FPHJc7Xbp,2D)#.p.rZ-)ft,.;]-UIcmW,,T%_H(-PK@PRdUK[jZ.L_&a8fpri=XNjT@aPnIk3$tY-/G/Z"`Cbm\3Rf[[+I,c3jtbGS!;+g4#b'gk&6i@FC[*H6+P5'lf_SDQS<-Y%gVrInMaOprp1Q*'/U:Zg*(b6a"hn?.6I`lM/S?sCe%<j#GP`+aSsKjD^2<a^gDMMXA2?esk!E\bZtQW4D&_i4XaqL@.53>`>M,sn%+_PmXF+bgMoH#qXRCq1[jIMEDpR^nS,id[U]ccpUl(1!'\\t:K.jGRA]8X4C/SWVC)3EP![R@FpEr+Lq@&_Dhrc`aNYlAQueap6:%AN1GkR>ighs#?dtC3e[04QdN"Z[uk99$DUSAXG.7Muhcjp!fo2npm+pQ<Ud"`Qg.uR$c*=dSun2)"4Z<a+GUHbc\676>Q:-qTg))%$KI\t?K^H7HY+)MSg;hsr1(T=D[/Aq)5s>lefV5K>unT)XYUqjHS`9&E6@`8S(fm+]bZB<G&Ie5*s?q<>Ol8Xl#u\<N,RP7Vs;dN%+oiB*gW$^>X"l&<gaqEi4)D%=Gem7`bcDl+Ng,pta@s1%Kk0ZeE9Le1c'hi_:34!\c<;PtqTH>8o7LsP(@>X-9'h#ZPYIrbC\5]F%6Yh]h7G4u`'RQDqV+$/S$>1mIDquHF1buj'T&Nj]"Rbb`Yr/\KG@]N@q:PD2,2)Q).8?f-E)O0Ae*2K;3&9FeJkk*Ykr'I+U37oZ%00`P/1tP9:,i*/fe&m^N8,K*?gfUiJ(1smWm:4RYfhZ@>cBd]mZ\keEoNS$^NN6r&[bc)ZBf0'9oU5ZK4?9V<qJEf_7=IHC\"IiV%M9AJIA+IQ_5&KrNd8$UiDsoR@>D^RI[Im]r?IdnYX\ShEC=VCelYlPQT?NDib2c!hncfBX[p:=bWOM%Xd?PZ9:+]$Z_OKU6q]#KW%Z1d&>HonN1BW:f/XjLm)BPg;:=\W4(3pgV1Vi=<TdRb(]NVTgX(HeYsV&\8#/-aO+VqVF8OB4sb:B_mF\488'Wq8K=q*qJhmFo)7%:Ns]*//mFA)_O?uP5.kfqjG*1[2Lr,pELWh"X[%ss5-\o.=%V4d\I!aXN;sMX_GDrqld%(8dErJ&-&-((FkD6rM*;*J(ENT.e%_$%f0l5?,?Xtp^U>'Rm^FE:*9=KTl.+Z0[I\m[^"R[HjsEaO3[hOh@2rJ5r9m8HmIRR]g8T2Z[F!<V%!\s7X!%<&rHb[0&?,9X`n`/e%o?U%@7_7"E/<c7[2F@'S<'RSAQ^>Ut^8TCKPWmIS:8dc/;OUAea_ghQk3k]&+XX\Q$+B:(@/n*)IJE@P5^t/HjAGLI;+O`mpfTp_%PBud]YtY-<P/#38L&6dXRTKT"4bNcYTU5cd^CsdO<$`Es2rM;^W3T%0T49+=j9bbaOV!eZTVs2_"2:4mAgH?=VCF?H:Jl77,4De7%bP51:;uep32\PS9b=)1e#Ei>n^Z!b+9'>*m$@qcMRZo)m&BS7GX@df140)@"8!RDYrXY4o`pAPf`H_!e;1GWtH>3FsER2ZkmGIa#%&epOm\NQ<CpqikWg9"-=ia64@('2X)ODB'.B'$EtgZd=j[4X&-%O0nVq`*e?iW"S!bfhGQXpL-mPR<>dJNT:>j*=[iF@BW.[shKX%f<U,`WL>+:Y$Xpq5Dc$D7DPp8%7/ER#Ll<.=\4c5N<c"9+sJ:ni$Ch?q3Sf/E`S>\=\^Tm=[cCX$lT,/<DtdeUoM"^,%O"h"[O?^%!Td0pi2ZkhQ\?u``.oPL#U"fAOt8%[;H1!.Xub+H-!2%H,$if24iu',=m1kh-Ws.f1^C*_G_J"Fc5NE&LnoU/bqe_e;R"7F*W&'$%P_[h6-@LJmdX(pOC>D;GT\91R8U^ZM1>C%hbW*/nb'+:5OP;,5(OMT\3k/F5TQ(%p$_Lf3-><JfSYu+fMCcS7b$EQ0FeA^Y*5lgQ%X1WiiJK\Cbf&-8S40>\ir:_N.TQ/Db?3H5"^d-LU]sHEsX&B1K5N8AMYq^aB?2]]@F,F=Uoiajp!g4RC*6r<fJAIgbOu^ZR1b;Z6%$@H5;(LI:6fCiOb<pBADn,3HmTF8)Mjh$HD=E9h)%kK%RM#rOh.;>chm9gri)T8K5YXfK7!rZ4q-B]7L>2!.HX5n">R6qA"LKB11%ZO1c"*&`LY61ta20;7/i>Ro_%;F9kN_T%1LYVj4-[oW@+ei]p4"3;/(8)g@=WfmS=d(OP4kI_nhO[QAE:[O/.4s^`\]7.=;.@]&k%eLrZMMf-meb,$.e?6Xb6?2;SA=8Dc$jn!tjo!o!=V;LK"En]]hrnVJEg4u-BcA$NtGuI<43IqqP)ej!1Bf.Wm?m%K7>,7F-$46f-%8CI4\f@[4uk":_Ahu$8Z+G\tK/TI5gS&&hY`l^CHF?Bd4H:\I&jLu#7.u.g;+0V)K!s=WhD.P.91qNUTA&!j2On8>^Ju*fKZXg[H%X3bR>RdAsaF=R=e^8C4nPgg0;+DUk^"mmGh#>#&lR1m"J5q4;6]Br)LhkNg,Ma"qTdqc#4W?t%FjND06X]5N2L)tag1FUk^R)gV7%e*Spu_5nH(X7r^H\7hG\3_:8c>MV=uQ9:F71Gg9S9;5]NeNnOfel[k%:A\(o:V/]AB\*'L$rY7g,fYU+V>42hMhs9^>(G@:o!D?]%eiJ<2Or(NUH6`brH*'$j4UYihk32:O#j'5EBZ33nN@$bo#$7m)J*lutT>pKn&#5KlI]h2TB>%10e=(9iPs**IT'^$"At.W>^FGfB%.bY&l..Kb+W\jRR/Af""jdI09=i$s7mAU1WCFoa!)QgKP=u?e$=NLjUk,A6)XclFD0h1%c36l<jk`,!P?[>'*+-R=H-m`?q^Q'J-%3.`6oec20EqT<0MLH64L%nea&n#bL7[D)[IRdAABiC^S2(+\)e0Z;t.iu]?Zd$F^+VYpI&P]ksar\'k&s22aIMt-WCc+,A4\0PK#%l%/2\`S1@!hHcEN,J#Q.`p(\-bk2SFJkJuR*Vlee5<e,k41jR'[S+-O(X](oldaj)S/tf:s0E`O4hmZX]XE,o"!#nKHd&=Hmb-M[%rrr!W;0;!'Icmh&%ds+Q:\ZUqrMQ.S?0bLj@/l2?%Wfj;9NS@36lbIN$Ic6%ZKd=J,Y0K*g$XTqcHg.27Kn:+)m*0(Wm[tm5G8ij%h?rKqZBR1V;3/YKH3h"SeI&]RU\%?CCC-h(n/EXu90t)j]h6W9Os+9Wb>\ZI=i#>8>&D"<LqliA6'*H=PfKKV5pG;r1sHhl*s$L_%NCQ7`$cCB<$0^b6X0mH&CN$=eFguY<ohIH?)Bp*9C^PL5m`p($[F'rS>Pn@"f'9g`O0se\O0a4U:e8=LUL\,1jBJD9:;4-_M>AUQ%WI;RPeI@#'bp&(J^M9;t7ZQ.0K&H"Ti8<`t]"M9[q(K$"3;Ha/*kjA2EIUrgf)+>rkHLPu_([KuB\MuhZ?801[aC:8B.qBGH<#Mj%nCr;%nu1.<9V.A)eGk<Bn@@9:)m\CJj.tRJpNmM@E1J"_ggR&TdDl^DVl_lFpENrY[B,Hi3:6LK]iXV\)XLaFM%ZC`NKSBX%oYt[%SQ`-56Z(q%,op2&;>OE0gTm7VRm_]\a6S8;U80r"fs"57_0j6HK:7[Es$F;2QW+'f-Q#Y5PrCc9*aG"u5-CW7Bo!o>`$$op25FW=%L6<%WC6.T-qg5ea%s9Ui]kkqUrN)r+"=R@.C>6uD<`fiJ"jR4q>!sW;*EjnlTdsP?3@PJV/"r<-Z!q*TChs.=7uLc<-Ab#_5U(/!%O91;")q:*[iQ'E`@,Mjeh4CABK17JbJnEON/1.ur@aSrYEdj8bTXJ)'?DHAY-%!%L@[?B/*=d^U26LnpfrHJNNI$;(!?T9Oel^\]%Q"nj%latUDnk:stG0AW&^ht=I)>U?#HIa:L"aOl@3js1A]pIOBpKG!,pXtEP-CG%+r+`[s^7`rs&%Xb_UhCdG!&+eDYIFd4&m[VR%c"+H7#-r@:hu-$`R4OkfP%M#OWAM6S$5hW<s$E:L.[4O><$asg\?ZjX\G:m"i$B\J\aOck!QANBqJaA6Z>@QW$i?/&\HYM=jVe\5%eo&8Qb*0N._BX$Vbn^eS%RCf]dct/da%cX3$H-PS;lS?1e!MFL%>QW9J\H5^UBPiOiCd^pebbNA-8AXa4Wh6bqGrQdQo#:$rFX#!%h#g)0>CZ+mX5V&9B9eVILKJ#'Xb"A&e\sGH$[_O8Fsb%,5a/Q_RA=I]-7LBi@]?C!+B@MQF^_=7S_J'VMGR$0UKMBS4E$sOSt[SR%ZT"=FP]O+OKS:Z76nu\+'J17q.<dLr;UI8YZuS!3ZfS\&aa0.q)7Vb;OKMX?*l>o:ff:DkQ2BB`bn:_U7Y@\%XuCkcn,aHlTTVN%%m0^]L?E3m&Dnc?B^>-',[ofO4SaG"42kBH$TE#q>-^kqFNP+@U\%*Q^g3Z/J'Dnn59Ird[F^l"EW+E1*hKK.:6*FK\<>JrSrUKiO%Kh8UOD8!\sBkYmlr.2i/!O^eDIUmXImrrR*;!%5F4[?QKDB[Ls9%O=l>hau;lKe-^fdas3A:eeTJiWUp<Se%9`He@erJ&@PB'`!p%X0If9eRA=a5?>8J*NN9J$_WGY]>[fJnmsA:j$Mn>)-Dc'.M.T4;K^2Ec8NI-O&rX=Z=ZAP<5M:OSE_hO/@6r]TG`hK:nZA"lbCPN%#NjQ33"lirPFi*b.sge`/\'0*gCFQVe`*+<&7hAA"&()=LbTjO_5an\rM/Ue%/Xel="CEqL630d^"442)!*5QWi0BB:_u1tHemmr%EBJuBG\]0fof_qZ6Mc9[m4%T@cOXZ;Nc4/W2%0C)SiJtOL%6",#M\1CebL:[g]L0VXkekCZ9W1'aG(%o<TYqe&EmK$Mh)+f/$dr;%iI1(,[2X&a#&>Mgk,mkW)LK["l4)U:$g8]%WDRA"e%mLMdWRBSeOU0TR,5e[?+/'@;K>?KWi)D=&a(/Gq-LaI&#HA'##<:5imBf/%l_9L:324W$Vq$eUK!nf&XHeTN*H$LQ<2JeT^/d;N&3dZW$>4[A;7OYh.B4pXa2BZaS7]\fCc<S.=frWkUZfDEb>oS@.Z]m0GMZQK%0R\_q])>\g*rY5PFr*49=03(O`@b8aBWHk'C">Htc5-&&6KjP^rRq^I)Cu-B9f!bj6UY`*(=r1\D,@D4M&.>b6E#QkC-<!125+kF%@skPl9BgnOrh"Ab[H&M>I[*7!Nn9LC;%(.%+$N0/?TDm;F@)":o&Z+2!QX\m0Wg%0M=JZEbARk=fP80TBGFF<)o?SmT\9nc!JG,m%GWjj+!!fYG4\(T3n,;BQLm67A<q(Z39#SY5hPi?$//IR?4HiZ?Y//jOB.daJZfg$&FmV%hBRs)d9g3+5Y>7n8k*(9d&^K&g=EC"S%kGLD7%(]O<R\sL1[Xe2IrGRLYc4t0g5&5Obflj4$=`M`Tk$om@ZS$K+s/4F-X``K94pB7_J(9RpGH/+k[;C-?@Wg$>GB0G5.6?*8%R_".!)tkhF6T>TB++O1#Yd\8D`>[/DYqBpm0Da\jeS@q$/KQJsDLV:ir$Ek.^K+nB_(Y[)H*Ac:?M*g-GB;q_GPZ-h;LB9u2sdHj%iqf):R@9Idf2Kl'\[+[b[CGb7QC:%P1K-r=Fa3QLSkUg1=3a`;7lSE:Z>_&q\b4\cWEr:6k'ngcWI"c-.t/q:-SHEZhN/36:A_b0%>CJ$1oP7U.3_tIck?9$kmW:A<?alBUa89'GAp;/F?+\CJ>Be4iWUk'V'^s2R(Zk>Wof$l!>Am]Qa>:_V%4F\-fBF]_V5pN-e?Z>q%U__jnkL_9e@AVK%F&brZf=r6'q-Ldq?(:#hVC\:s[lcM.@@M@K_q^gYm;sb=-=,o6*p8F/gr<=@;^e.$)EZC0o^3Cjgh@&Eg"R_:%`aQ@*=m]O<*ZE%LOAjFR;&q^6S*:l;lW5D8[8^d-6AZA2Dk4qc_H']$2#<+L4/lA<&Yr=$F`uUMWq<:^q##F*WKd(pfNE]$Ihpai%Dl$7`h.]]^]@2bkgmrqkCT74!o[W=XeDf67?gDbP.u!kK^If;DhitO!9"!pJX1Mll;^p9aW`<s*KQ:B\nZ?o5r7dTQb,_FhPmZXI%\)"hlB-lZJ6q4"K?^9BGYd;fhp$ZVjk>Ed7]HU.:ec8M/^/qC.:Zpk2V5+lbX)dAQpIQh<OaJak\U*.Y/7+lVV=T>6Uc^-?m,bO&%V=!+;7+tSA;lOpkXA0"#qUTpI`#J_KO%Tl05?e*.WAK`\WpNQjoAuW;G;l@qGirG514QpGg:09=X`URJ;%mY>[6.M$IcUY]eY^fq%Tl('6HM]7X>8J)NV9g$]g7=Z)fu)P,V/N1l^Po5/T$AsdZ5-5/%pro"TUD6EUq:\P93nWB@A'g9ceiQ7l>:I9LO7(&<i*:K),F%N%24M:#.Kp^Mqg+SF%_mMXrfunGoo6lD2oE,QP=BCJYgPr9+T'Voo'`W"^F5Torq-.>4cl9GbN7!5Dl"7sof]3Ni/>5$o-<Y^-)f7d%E$[W7rfnNW:L@(n(KUJa"V#PG[,)8YlW'hUg^^@V8@W!_bQh*N>.i]I3X&Dq,44d`h9s8@@&:W9/e7IRPs/luA*%:LY>UIeWT21u%f1Pmaad9e=:H-UNQ*tFsR?+"5O+`kJ@?FNH1?KUXQf?Lhn(4.<V4Gp%o!DE]X$#hg1lLK_8Z%bRVKt=!V.a/9V,fX*\KG:f9*:HN%XCm!R8iKsNl$CB3e#]ooQ`NfobQUe=l1b(SG>`-!/`goi4h$#&'2$=>4':b<TIN'1Ai!/Tk9Y&GoK,\rh9;+LS4Z'pkITsA>]nHB%9(L1uiP;Q&CQ%MunNBpA)m!"3:T`OBmR!cI.8Qch.=^n[.Rh(Qr5s?^qRa.AqP'6m?610!VfJI#n';c;hLs^OdfTPKl@#S+Q0,.1%WBDJ!rRmE?rGMMIXj"\UfhcHM:HK[-8+hD1`4@A!SWr@0JSFpt>r^W&-1Z.S_;B):LM*)Kd*ljjY^2t)Vhqe,o7CqG\i,/s/dWnD%HY5W?T7umR=3pKfZ!m'eK_)8/<5@8_=lEiU-kl5P'eWEL=oYC8.07F]5G_T1#;t&7E-7RPVbc+N%A3%r=!,VT5u/#FlPXc5;/Gat%Z#Hh1$:/U&$?stqA'i]^_W/nsK'0+#Ym4QZr;F>DnFhJ`4C,,45u4tCBC4@\Gl$3H^18#ie:?_IN+fpr7fcCmVoAT#;`X(+\TmUZ%C-RehD_:MS9<&60?(DdMIilo25?4>E(TV>b]-)u&h:'m/r'%Bb1>p8bG$SUh]:I+4DJdau?Hjkj)Q>T*s0r#,Ac;]ebaS1o/*Qfh%inE\l)>CMB]PqJ.I%\kFg6q6F@_UAUVV5fq]q+:jZdM2mDeVk*F%3NEVm@hL[rT0m6MY(h^Eq0:nZK6b"di+=jKicY69]Ut#d9f.%Xk-n-%;_"tlf2`OQKO&]^Agp`S]c3:hU.h',GR7(53,G1\3$?ghq)\:FZNT2J";?,3)p#mBB@X>X?0A/h"p7jF*:<=>k:-[b:6LV%(Xd)uQ@GaRm7hPr;rqc>;^oq"G-s[4,6'0d;D=&*l:7,48man7h,uXAo6th*G1rq&dp6,Cg6Kg`8r[-<k4<PW<P$XuO`r:m=/qe:%,goGqSc4P7%BPdb><o%C9nMQti*WI(HV_:"^02>(^SS_<M=2!X.=)J(Vc)`:X4g`rV8i&/S)?od*XO*1,)mA[F&64n%<-H9A]^sD%I'_m]-+k44(ou_4/<%`h@D$XPVmIFY$Y&]LC@2@iCZq)]i2=oW(G+gSSE5V+8!OIWX>AkF`2-+Hao8fZpgVnj<eRErO/J>`-DEK[%6?*sBZRou7g@FE2]OJbCpXOASHltMSh7f7V_27!>,'o8\;M`l4^M*k@FtQSLkA8lKW8&(-,Ms00K>R@OZ1Q])TlCpM_d&Ba8nmU$%l)7%M6Z%:LNh%5A";Y5FjQW8^IFa9iOC\+g,.T/hKf@.,'%!GNdLuM_kUCP'6-">K7.8/=3r-#V7so@7rgfpVrfOa3TSN6])=IY&%n.0@%UF?+)pX)X>)G`L?:[!uLQ-JAeq1l4=g;DI[+c-pb%'*#B<-Ep?9\fT#IHS$Z/m43>;+V7`/E'm)\rB#OE4Y)B&!W+fe(>mX%<Uccq`Kt7I\Q)G625#85QeJSLm+qj@7!]\fPcu)g*"'="0%DaB9;F=V<8K8#!o%3B"EZa$Y\6OYY!03C4^<8%-*OiW7jW;*I(Ha8%*ZW2`=sE@uS?$GKe)=T-+19Salpc>NXmJpES^[$q3bUQpH8S?BjY,sr-)&og\dn1*_O"IJfcbEih$2P>c?Bb14gmC)A&,$PDA%VJ%%\BMj0=BYJcB92PP,WrkMsRhjLb')P2^>rTS_+u#GH]FjN'@,u3g\)%m3uNNC+k7,ci#l.oo>>SS`IC6#DF[>l*6j.MbGmc^]uP-%5HMlR+SMIE5l]V#d"Q3`T-6oQSd!`O`P@cGmtL+V5UT?Vq,q,9G:CMd/5^j#=Rp$F_WSFJe\f^Bd&WXRd)>!\1V,/-LV#VhX\)'Z%HX_lWhs-5(R@2fh@6HX%L$6"MMSq8K;8cXfc%J"^4`P/"PeT$Kr>T<PF$V.D]1LHpF/?de(m>3Oo4o]&YaCHTq0<H>Quk^b&+s&d%q/S73K\GnKPohKmQ_BPP-^<h<ES>F5g&'RNc,;"G@Fkt;anM(Eh8C`(d:gEqb_g5A3)"8Na5a[%q4"9I-02Io*SZrr96Y/9G23g[%QpL%&61<gub\j@#isfg3>6-eW2)V()\Vk5O#K&ODo)YBZfM/1'RFQr-Z)A?'p*HH4o:1d\7L8ETTNW1a:!^O[MpmbUS>J\gJ]NT(%lJ'Ri1cA&0LHT?B,!G-/Y5J&j;8%s,aDC&&)3Q:?b=a$FDB_@>p+C0G'@)@+r8%N-:asAe^_P@<feAKCAni1U&Mub%ms3+e\&T<<%-s)UYdr?+QHe6NXOP?7`![*s3pKi4N&Dk1YigaBUTJ&YG4j$[lb,j$s28<@12`&FE\<-_rSj<=eT9<\g`f"sDpuLB'lob1K$:?"#%*3hhc\0%s](5sUO&o5Q3mNRsDJ7kuebVd>RpYA2!^e'HC0$,n";c@Z[,b_Jrn,3e^D_NH[m84i;1m%tLU&kAC+^(=t=2_X(_^+.:%o&eKA;..ugE<7-NN;4]W'AfBlIiiF9C5q$mn!qP>@)Ja]/iN+kh&8G"gkVM/O>,s=0p$p1c+YQ3'.h8SrfIDo.D<94g@L][o&aLE%jWQhBUDR`>&+ZBA0N?9?ehD!8g:S-;K7I9$3+s3m+Ocu@=,$l;@p$V8"8=W3g3D;`>b<*.cA<gU&%p@ub\/gdk:=;FmWjlZ:a-o4%l#,0O7T9AXN#`>NG9\L9+H'm,_^8MJLBFEb!*^5<j.>HYjrpg[=gL:jh&Op,4i].n_RBT^1>gK-k!iWa<8lte`:XGN=$*>;gfdUG%q(<q!KuiV*CZp#"&T7h`iI`eL:<#RENZ3mHY0CTA=T$eGU@BcCeJd=&EIqhC,/)uPR'H-3a(S0k`lpr7A]L0+g[<n+0D"df0'1?s%fIIAjL&kg+^MDop#2A6CoSL&s(J)^6X;#:f.cE-J__`:A0'^)>UB,0WL)Dq0.jGXl`6IDr)@cKDB&ui)I$dA*<'D4[mYD^'"UU8"%V:#2m-&bL?@ul%CLgQObfH8oI&1D%NGiIqKE%GOLnnK0;&`&m\TMpoCG\_;i8^Te6bD0Ma@7rr<dNO)#*#lj3]:]fW)_1(C/9j*r%!A"^*ip=3*^n\TY[HEpCg!,eWAD(3Jnj4rOMcR-?\8(^emd:<E2.M^GS_J=t2]]f#-<tV1C'rHEOa$q%q`l_#\^JJRmM6(c`HJ1I%=5G1l`8,[&n=@A-a@;(f4*)P]l(*H`GA#;b)cigGA,%km?8_9JDQY?qh`h84>-P.!fWu_D$aoI%k/)Wc/0Z%\^?9bk:8sGE`@=eV%':Hf>chOgWaac>hHNt-s9lQbch[:6[7gtms_rj?.%3nV"%mM"fb_7PbghZ;J%9G;PH4^1I!"7/8q]>A',;r=XgFr\ocq5Y;*@7LT%p^G6:eMhF_7^R7Bj89&5d%`\,?"@c,7MWd^Xd`d'3%#AZ_lCf$X#O.Whs)ZRn_JkQY(O44"Z;.##Zoe:H?f6GBi=rmG1eZ'H$2s$%M'iNhBt%O"'#/JsoU*t]2/iNd2kSqloMC1`'o.&fA0ZJs\/V:VPo@N+TiQ(C=bI@,O,up.gSrk79FUA26r&n`8Xq@bZ@Kdjg@a3J%ldWep7-)?Yd\Pg*Y]k%hI.>.*pgN]La2O:8IDsn!!QgY^3;M?D>ZIARe(&oHCsHi[PqP$j9-f-BOe,5Vh-t%%*LAK;<Xp.bM/"_s%N^"gtS/f-0$p#b?E4d/OY#:l#3c=-M=?1K^)0C87i&E`=i>H_\fn)TQd"Q,Zn_&NSjNrTnd(-Id8'dk:c_.&>f_@IKi>H_cacjf>%$dYK@I2OYmcFkA],jij:$aA0j.(_)k"7%=(P@?q+Ti"Z+[uX_O`];jD;"R6J8)=Z$?Z]MedMS,'e%)1GOpA2\h&"ljV@i%1o#eUJ%2M4*9>V9)[&mjdN4MNbf&7eZ8YQF[abo)A#3>];WhT44a7"5\B';\E\Q2)73\I*%KgMJ;KRl!'WY'DL*p=#DV6YQBh0758UodjQg%"t>P<2TK#oUiU%dX.X5=e"3`<m^e6KFrPTTLl]<3a_jI9N!DFDbf97;U6=?lDZpHsQ9Z:Zboe7A+XkHP1UQ.X_:j.!=rn?/KSh!0%+62Ue=/d8V+c2b#>+'].MIqN[MQ'Am?W[Zq:k:E]5tW;_?<<L>+E6HQ*29:Aj:7C?+B_>)h&U"$V?P:^>ZP%04><NHAPNYra7n(*%.cVd"O3_B_q<%3!n3O,5e?iCe&rbG,Nn=HK'=J/FjNNW88+=jIj,;Un+$Yh4GDA/Mo0,P`T-o4.,n+<S6nkp&"Ilpg,!PQtn='1"%SW#ZW?l3FjWu!!W/0b%)3/Yi<+EId:l1'q>ND:br.3a*cQ7]`7NVO&r$orr'?G9[#[Ko-KI#2n;aQOBa[I_GAT<m^e%lT0Kf@u8*%s);de#D"sHW4+cK4:2mVNNV2\1lC%7[5f6qPGgm[!"Nuam-_[38;J3#QttkH>hrmSOrUae$UM&fW%>K1kq0\k_%%oc%LqbFFh:^`%>PU(oN]/K^Z2;r?,<;*#jgHB9,T3K)Tu%T:SCJF<+;^_oJhs.64,?A7a+!I\Nd,38-Xr'[TMt49lF.;GOg3ej_hE;$1<81N3$89/%^G;Yl6taNMRUi#rlJ&82+u1<9_As5POf,F>N.#;>]LE>HOn!ZfmeH6scPr"_Pb`:C16.<AmuJKOO_7]M1OacmY@1nO%K"%5A-2`.%n,9L91=.m)'>1q%IMuD6LeQHH8gFj_gkZ@cTuimbe.El[q_99MM0SiA_%E);aZ7S"60\lDSeJ\.,3L\H=cQKM*bm69q&jX/`%X3.%/&*9q)!DnIm(&9<0D-0]UG:%'4)fAg#4:Z7e[>4_nqllkIgJ8o\TK&FI13S;`5i^Qbc?Y&ZABEDF`HtB6O,6cHjg=n`RuBN;(!ap%lB^M(na"l.#<HnN]8d6&?t%u:G""&JN1:FAp;L-'gnaQ#`]\f&?9VVYN(kW@Nh3'0c%m;[:O#'.r#MftjMPt\17&S3l$U"^'1""/%%i;MjMOBnHaG8eo1@c<;'?Z**Hf2RTEKe\'$cq=tE'@O:0,CprZZFZc5\</SE"RH=A+,6W<+7uE1<,nV5UK35liXrIA#rf.RK;2=%aNI/B'*QLocJ[Y_GR5G#o,QF%^GlY<1NndA_.!j?DQ`%9Bnk@3*-_[lh]DPp4.a8"hcT@X_pUmqS:G]g?]8E<44^+0/8k8I(NjIb%r2n(^5MhM9XiCLP-I;Y/:+$LZ`X@6")ho-8X3$k99^kH@/JH$K-$Y.aL;("HeO5/N<T%+!I%"*o2X@Dp,CuUb6X's^XV(CgYcA%<%6T`cu)6&n#ZbQ[%itCj-Or:7NPKZS2SkMW=_p8H@;T5WsM.EC`Sr%!R,+e<\;A%(t1/]iR/c$;tcb@-/r%/a.+bur7g199Y0aAE2%i%TQHN#gNE)MUn>)gb)9?Rd$[MoFAsj6gG_[lsR=kXhSe3MY"pLAN3pE$P7F6`%X'T0Y<U<&hH6+sK0jlr5rbL?__4>S>LMHgM"e%-=Xf3ark$MPC%pMoSN)2?"lM#oc>\InptP?@R%R75XPd<Z!BM"qecNUk14n#E:i-V?oC%mZ,Kh^#s4[o<I'TuGsQ_ZdE0Y)-@&A_%G"VtI$T`YGWai9raiPSfp$pY.B?k,]eC*OKF1`4c0Tj?_`1Ks9#HM<KWH`TG(Pn^D"l^>tKo9dW^R\iU6>H>S=VYs9?b/*4Xgc%>%-F8MlqmnbUMoGLWY%5#jSA8(VQ$:fMRq_DZVn/)J19WKH?U5QQb5=V/ZJ3iK@&;p^m=7g:Bp'5HS72.+QL'o8K.Fo6[I$TJ_>F"Z%o?PobO!0jgrRs<m.eR$_LK@1TB%X)T$X;3jm@Y/tgTY4t&&D2Dq`_a7h;A^RoN1JG25nqq8>SDb9'C\N+8aN<Q)5V"[EB]`/qmlh%9pPHb4^>tb\kK+OhcM43^Da0.a`Pe@V`1R8eB*"d#0'F<q27In)uJt=U3:pC%:+4*.H?gm_d^[6>AaZsf[JMlmm_S@7!5<T*dWlI%4#$0b+#OA=a(iflW91lY=2Ck!Oa"/@/q3W8qSp-=cJ>;1B;b^(DNaU$?-F_Pl.jcJfoSt)pV%Jmj+qJX?cZ5ZhCIZ]UMrS*+rAnH%k^23]/fTYr5JOPS7SZ7/F3dB^U.="W&:_=umt]%Q/3<;Uceo2pCl`LDflV]2`K5),(tj"[IXl>NDQIY8^KeA6o3mBuVXo]P-IS+'%VXr!-_soM8CcXf&8PD79/hh$'d;1kYN?lE3&/$Xc/o$I,A?tItenP'6?H:0bF7YXYdKQh5N1*K(^\0_QCqAPpO\'06`B<<ub\T=X%j1V!VkIW3)<]6N+A<_$:#q(j0kLUts[<b0mFFLcB4u_V_R8)kb5Pn-qM.P03Ts@^D-^[WkQV6M*1GWQ#h5D#,/t4JF@M?n]o?3sL%P%$/Ol25Sd!ckB^aJSR84MA;Uj(Hj:.3/)q$'WH-o33diIcWu(l.cPVUV,1jZg%D_*4RaZE]+ra+h"`j1;Ad8:$:tH#*NK7Cc[Rn%[OE)aaYdfkSR7/^1PgXA;JajM%Nnp3?g/%Gmpq<<-:V*h(i.%X4lQIQ:2:h,nL7@?\?1Z\gfG;#>tjIr\db:dlMR`AG]\hUfp3:L%&lB(O(G7H\5+W&<RDVl\d4W@Ih.Q4flatV0luoq<.qj@#1pFRo)\m!Fa(c7Y0Onjb&3=Oq2,'Z5,gVib3O_Mcn+DJ@G9;*_?id`J%\M(N50k\af(C0>_M.r-n]]LgY-Xo4320U<h&TuK,bXB#KS=Vmp20XE`BAc4&n^E^(Y.5K,U,_-iGJ4YXmmVFfjsggHF#S%N\DK`!%,Ad((H%EScIFN>@%ORQUd6<rAC#-jsQ!\%anf3>O`NXPQ7OHRZm6)G0Y;Plulmm)d!r)\?GH+&;:`$d$,ApO#\XP3\HX"-WA4RY&%Q6Z^lYiT$gREl:&b*\%KRco!'CoI"J%*cgfljDF:%LlFT,N;)WL*APUA9L>&h#FWj%-S^E,?0WG`sF;N&1fGdeVF#VnI.58"n(_D%4<oj$!A*0G7V<(K\29a!$U.cK`XV:k`7j+VbWoY)mondU;Z+J:hmHQfrqb8kK0-XFfg76$`m%e?Uc`Q.;@[p.CY7&J=DNONW3>EY%\)Ff,`X2SY#'Q#cQC2bRaVtXA-[14%V'hC6`3FgB)TmL>c?rk:a..+QK^S+F#1*(B"Ah4Uh,`q6?P$#SQD*:2Wknc+8RrZJKbnR/%_-mU'T1"DG,4Hi4E9E]tGr>:LjA8S=hWh$Ymc%C0j5+aqANotIEAqFj9u%3^,MeSCF?WR;9mPb/6dH3cU$)$fa:F,O_d+H'R5_Bo%U`8a]Snc"2n2#5s(S9&+:.:[d&O3O$SFZ=lq6L=d-e=/R_qgIsR/'jBOa@\.q8fkra#W=?i/&2n$K#nnn;N]99<aMgEr<l0ld0_3%[W&Ah-GOt:F%rb%nou+nS&R:p\H_Z70#K%jhmf!P]l,(3E6'<%)m[m+3/dU10ngpQ]`n`1XRl;J3pqOb1WFT(YM8J0.KS4(N):H;%M<TcimZ[/kT0)!A][s=qR$1Q+foWn+ObTPWWW8"c9k,*m0RT__Xe&\r3f12t0L)\^*K]^&.<!iYf0VB?T:M_a4QjM8A;#q`1t;TF%-?e5*CY)^>%F)#8@D`ebHAku_k"U+[cgboS%9cCK2ptFe\jpF3f\%:MF'P9`]:g9'II"4!E7jQ"Uu"chD'eH6S%"d@GC^i?WPu@5%5,Ruf88_d84u?ngf$/LhApn`sVKKIZ]&QbIP3fo<D+[tdrU]"!VIfr%iB$q(CiC".e?UELGjh/,FRET/\R!P,'"\Opr;/(Wr>/8t%htuqh@&:3hrps>jV:EB2Zp_K@*9YYY^:I7l]$m:ZTR8_/GN3>ug[;$g+)[ZC_R&]'is<:M"]d+;:#S();JgaBls"f,X#,sY^4mmQ%:6iF`E2>Wh03<^icIF]HV\?W3VVu+(.Qs:0XL-Higdq6@RRko_^TGQ<$Pul[-EE_cZPYE(\>t)!.JM?lDXn\mTVOLEo2N:]M8Z?A%>&n7MPF*QcYjF/+SK/<1mt%E0\_d^bU?m^h`jSJ(M>O@Zh%qGZ#sf/OXg3;m.Vd.'a9?Z<S(I*EZac!P]+K+'To7P#^pe@ZGs$'u%h4c9elZ4jTlq#QQ1%GqkB.%4LSVGg$'p4ci&EmF0Q^&>n6dp*OD_-/PEgKhbhB)#jjIZ"R=a+7tLQ7_r=a(Iifb-Y/.epfK+ihc@%aK>*A21p6ch6+03@@6-<Y=Z5:V=<MYA&_npQ[7Zp[p0Ut4^<\ZKo*EZ?(/hacgC;qq!kW;,gL8F*'cE.7mGUogo)#FTLkoRJQ[L8%#Bn,1!K<R&(?Mrg6?d._MN>;,NJN4&40R(.Gb=#2QqDXE54Ya:'o*AUo&)#s8"?k'fQB"2@95^qOJD;JJ;.[ea,?sF)/\iM1>W"@%J3?4pTo%!2"3W8]l,QCAF&ipS45lL[&;apeh_Tb@P@O8(ER'+K/gK(*34gd;S:_[03,^5T"?_H6"m#IA=\eV4hiF>N)0tDi!<7ZE%p3[aKa@)TO_U+-Z='Bu^Jbc>>rF3Ye)d;5g-l/5o1CV5LFlirP$XC4^Kjl23B`mV:Xqfe*ZN0#hL[Me&L<TdAO36B#5bCt4L<'F<%[im^9cuVGBOBI*REr[f:+6Wb0Tc!2e4eHl%+gM(M<8BeL@-AW1O]d4^;bOo4KqYdP"6_b,!uR>6'hF@YDq+CQOlL$S`m"MmoT;p%%rHgEMV0jNEa>W+UI"<07'>9V`,-!>j9DK4jQ,XZ-np0l[+1d\t7Rot^!AEl;Hn5X!B.r@6)8erBfh;-q^V=fR9DNt1$J;;Gn"lJk%G,DBu3ZEskeW7JaC_CAJq;:HrF=())]m_2r%5l#9IXtdo^tDQ0]mf#.;i6(.?[1/X"O;`Gp\Kl!2H62nrF4kiNd\+'6QNp<L6!U@%FKaRkkcK;jF:=AhVG?WoI`#`;NI%e#=!HG/qK[:bN-_[7Gh5:NY8lP.^[PJ+`kDJl]%8UJ6\u-*lPHrrFY`^fKjTLu8.Vug/EC-P%nBoF\EGt^$YkS!J:NRY)CufsA>[*EsDY4t/"=i$:Ic4M/&ehk.005S4')26Vhs*/UI=/m*q@.Wjhl-;G\ZpBtoa<aYFm+2NK"$rk%=se<o?hf3[eRRXslPH"]6M?C7.SD>f<^1NZl_sRSKs/t`]K_7"rPCKu#A0bAH*:RO()XNL0P9/D+H'&;M>2?,[BP#VifF%Xme*mi%c1b8R&b"a!ne@/#qtS1WHf/f7)_7E<1=5^f/.oqVD&_MA^[R5bG5f3=$qIq]0DmpCk?abMme*nbY'^nXq2D$BkspC#qF0_T8_iVJ%I]M@:mc05ZU_3>b^6&rTEP0m0h!<"bq"rLWS_c&FY@$?jI)-_5KR<[7Ot@`(W*_Ra]md]TA`)c3DH9q'1P]2<*:$qGE&39mX<6b7%5DRsA=h(6^a#AA]DSU[Jj$p@;\,)).+(*eSglO[#554o5RLF,r,`[;VT5,8Rh!.CERD?Lb/=Fc_<^3V)`kU+YI%q@[?mfos?b"j.%;/B]%:]@j"`K+67.H\=qDe-V'W-eJpF<J9IDaM&@$fSSkGtshNq-Li*>Q#3!(oF!jc8K,uXRD*1_S(EW\,&PGA+:4A6Z;YX,)Tmd%lSjD)1W$hSJXdtn33ff*,OY5_Zeog$Hi:f/#E4[hVh\Gocpe+>nDn!%$NiISm(fc8_[,^t.lhN](LSBn5()D(4)L*jF)^^"p;F1c%3N!$nfXk0c(RmMn8=G("!`bY'(+ab5.eaFIk?=S.ff6$Nja(_>gS/\90$S6,'hK"]VqPFh33@:#l%d72'F'.eF&0E?WU0KMmD[V8%+*2F=p$?klUAi[U8u:E*U%E\W7498Ug'5f/DUf8OSR:NbE4C,i/0',RIg@E]g8An=,b)Zi?N!L+m!cYV=$j)6>Wo4`L$Rj$N,Z7J%3A3M/:7VYd:H.aZo9nAI?K@S9iT2KZX4-<tEh2VcCUMV-RobGgVuLRD\o[^!RKR7dbjCp)Y#fgCG)soBXfKLSO4;$_qW;n>=Dd-J%Vrp/=Z_(UhW@9WIS=+9-V=t[Fp>ko@9lY$$,m't?95WecKs66+SgDgamIJ4b>*u9h!IEJjeKG]88:G9^Ms7$mWTF&[_Hd1Vh'9Fm%pCN7E$7N@SCIJ8EoRDO\[AWgqkBM:"l0CT1Q2-og20j(4.-D-36M^Rs?e@A!rpENGBs3o7R^255paIet)oq\>Y5Ffa3JkM(dZsf*%Y5&`O-ab7]Z/m#jXt0BU1>bj>Q0Xkpqq1L(c*X$9c*&-<WTDpj'kZ5:;_pieQWfj8g-XG@C@Tp*0rEbJj+GV+o!Vdt/KN[6VA=WX%Tr4.t_ie_[IAXB-H?2P\.#=p\FJ3$_M:f#pXjt<gLG5W2P)]tGG2="$5!Cm_gXQgSl\4-G<0k0Kc^<TQ6-*SXj<lFrN:lR^D#rMG%SYu.oci#DXnZoc?!ELu!piG-bH)Ogn5R[3VDdP`+OAkn,mI/V7GPg=pq@U)"ca9.OU!Ge28.X@*Ff:"@<1,2:ZU]^\kCJl4]A-p-%p2\F\Ye<6/fn0scIddIK9/hOZcM@Tn5qNB(leX'A3Q:f_GP8=-n"g2TarV<!ch+mBf_sW]#A57V.;rOii90@UJrS]VR#&i^e+++e%=o^(bQ7(Ah<M9HIo[!SlF98O,4iq,CH&55-nFMg9?(fE`S_hQ#U[p,VhRrpK:TmLQdm^2Xq^plH&!o;6]s([HJFV@LE\UWuRpGi'%c<Zaf9$2'IAQ"5nF7Y<6>ab?/k2&IhWQZ.\\N^CZ9WO<lcL2^e9Ok!52-7C<mT%k;Q<sss\e1A.?:^!nV0'JBg"kDHjr;XqQ?_4d%'YEB??G'T?QB=R.5ZGE'5;.)DfY?8Kip5R[4S%V,?DLV?me'0*0__@YI&k?T>?)gp/Co9@&WFnDqM(V$3U>M)H\$TlEhr(;k0LpS%HW5GoAa[rE8q&BWcefg801S6@X"Ri;)UU'UhN3`Ig=,tHiDV8!j;Z+G_1cV^b5DO4G%l`ql)+)7%K<VWSWN0nAF3"H/7Id+$0$uT%Q%<igOaX9&:-"]7c_,d$hhn<hd$IP9G?%t:hcSF4QD]bc01T`?bc:7#F&s1OG8=3:eYBQT]"6SN5.D3%,GoD&VDqh#miQVkVT?`o%$]jC5:*V]B`Gc-Jiq6#\rqJ*Ul-927\S$.'FQqpVC;/QW81ccM4eODbr=1GfCDOJR>H7$tctm@9OL&1J:mk@Haq&6tgCDS46"4E2%nFO327!!P^\%r!9[Tp2H-/MScd[%AE/E37bk-e0KK^i_8/s4%u_!>7[bLLNW=W5Pb0<Hc<@i=o@C#:SN.rS`7*t3*1+'h2bH=oLR%Os'gOPr8AFM.g_4,I&m,\]#$VC:E^'[9[oheO)W!?OnhKE?ISTlk(Z6jF9!ocGp5R3aT&f2bt+2WUPHkV(fRGN+u1`2o.`USSq1Z%bMqr1=[WCeK,Lc)h9@b*F2&JQnS@DT3)f._HJ:/uEQ:^tf<OWGXLcXeIHC"kaP>Y&Zn9Xj]@pFPs)L5M9E6TLXl;rm]!etI]$ApQ%[b`[U=a2EeQd'5eUMS5G<==lbe%;[Z%l!7S9'6ONpVICr")q:<c84flJ_UYh2G7tRrH9X%R@11Bda,gg>UVdS?PK(Q9"V!DEU.7!%[p@edY'8(.L7#Ho"f5=6AmG)_3l6ER4fh8H4,'eO#:lA5Q58e1TA(/`f:CH\g%j>cn#&ABTA?ik;Pc.8/_sF)505L2>)YWcE9Yq`%!KDpUImSL,LBhV/QAXA^g3*5%pF'p]mXLd]GF-73SIV,fM];WJPfF.W!ssU'384)@XeQr[c\l>X3]]p'?9(+MC=hbHY>")F;fa-'%8SY2LF*1u9`0sa<Ar7*qbKeE0fChX1rY_0gP*E]rpL953JhkoHb::."3O_e!CWkGrqBBZI9A2uKjWE78?'R?%H<Z)LH+(&%20\Yu%e_9EGQCjLeVmfGcedd66b"V@(=8.Z4`GXs\Xsd8ubp&+hQ!Y#n#Q4OokT-#DM)7`kKo^,?\2I7Tm:=\LlQ^Qm1ec]-O!/1noMAif%laXU`8JQ(IT16s-f#7\*WCMrNXY':uMZ(]C+fNf[6ZAeZ&%6]4<!SY#nN:0AG.5\Yn[;E^4KU`JhAnL5FrFF@%oD=n8>N_8h=`5\%U!$+HDm4R6Sp5X8K7,:.dk2@*?ZXJI@TK,e&e4p9@h/3PF;n%-]#/%D[R</GLBG-rK%?M:",Xrl2D1U<8q&YHPDps.A/b2U/fP8G%=Mn9X9XPpOX?eGuWq@3MG^LBMB(=hq-6D(*NKtEffN:V$0;5L0;^+dr9Qp^FNQa&\H9G#q'5>4D25Z<A=DNccaEiOCc72'3YeXXB%6Pn%de*#SnjLDaJC.Tlse"?4>Gq$0!:c_)_mh!1E"*h'*_1:/uNL<(pV:;fUr8dSH">%2Wh*0S#5T-o&AomU#0C(U$UF$1OQ>+Nq%q&)O2]#A:\jE0^m>ZB7?m>KNPRH!):[L_079PpnKQEta&prD>YmPE\cJH&MnGVHhENaMBXD<pIpI1LRAOXe%X-_Gj2'KLTeD,.1i%9oiJWo_,r%[JKCg>g/eQF:.L&c.A=@$s)XJ,)3Ot0L@OLi>>Lcj4KDOGK7.`I&Kb?X%0%2gcgcXM[a/F"\b]O<UV+l=KiID+2Veg%Uke[XL=`UBou'c::Q;gMRUmJMO6e/%-1!V+GT/?rU_XRFnF=GnhCLn<aKgSZkSON8jj3qs#o5-.cQo#<?m`G-CuP<?:s,c6kNY54%K[eFGqjK.D/H2)A`>R_^2?35b=L#j.W_AI?rBp2"W!WOSD;rmOX7>>=EGI1,?:nR/c(Ec!<.B'!o1T"\[C,Z,l23='bXUanW"+T+%(Gs@d9JJXHA*m9`?n_eMqPe+>9+42mL*c]"iqmP=)@bn3+Mlg=?cT:6G<[<e//-/h\:FIo%'L73SF05o4U`+0k!XNoiAKWQU:\o%%WD,_OfJnUqN:(^A(2%lOf]PYKW8TUCa#P#q1V@0,/mO^SqJh)h"8=%((CU&?+I0,$\&[5rD..5WmFQ?g\@JR+D_JM!k)+BEhW+=4%p2[h=IaMIRFWOmc<]@uJUGuQHQ\q7?-+SE.WS]b15Ht">_7stVIt:X+,!G1(]:V@o54XBe'QG?C6S>OOA:OL2:W`TU+.66Ye/+Tb%SAMJigod,2i5@;k.Zkc,'KKJ.G3#n-TKPGcHu,V"S6^1[rJ)9:H*7g_`1N")#5W9+pm=$eHn7'pT>apb$3!%-b#e*PjjoCW*TuEe%X]P;I+)<Tdps5\B;c*Etlm^P7]"<TtjE#Z<isrH@Z\=2%Mp(!RZ#gr\`qK)-Pc2o#-9/T%FNB;f]DVTW==A)H._fJ=8`UiK=Y+bq%S$ab^*s;t'%P)C;R6j&Z59CU`EC?>>(k,[qR,(smgENHk9r/ZDMC,rPs!6X,Q,Go2Gf"V>JcB5=-YuSSs"NKnYO[XiGf"X4kN\*_%IY]kq0c3^=:,L1eA3=9Y7XG(_j'u5rTo>nH]fU0k\:9Cba`JW67BqfP#MBkG8gO@iYnhYIflc]<+%U0g:875_0g`@)DfN,UXP,.F%<>!k_@=-.'BtA?@cpJDh3s]5sS6`.]4=CsQ1Rf]2$C*C/XmG\1^o!te2KtO<g03E]O$'$aQdZEGg^c3;jub&0DGIZX'_Mm$fg(3$%L-UK2].6%G0$CT%pEKB<`?fNe.8,j0#n6TQPpJ,gPTIH_\/4S,bBE;:pUgtKko\c,A7+`qk_R4;lJ'DmDJGg7h"fuHf-PXoW1OH%%f*`>]p)eWTcY#0)+/,CN%Qk<YK"]fII-IQ!:%g$4HU#\CjnoQOR'tSa(KVQBa1NhV/i>5<jl[-iftB8TO4gMiQXj@KbFWZ']A8p1%6[*h_.4%9bHVPb1PR%d^&c25L2A'i^6s-h,qRLS&O^At4<^_rNKtHU`,=-M+ZPQC*6kWp:L(JpEB!_!EO!]0<.$DBGe@N4=Oes[d%-A"?iIcY7>Z@;@UO[/2i1$!jSHZG-[hkXGd&g]jlIs^Vq+nIa9p(/>Oo,3RGl*]$!8!#8>$UlclNZoCX66\QF$=4R$`^:pj2Bq:M%`biW!CK-=I+rd9rU_>"Te/(PkghmD1[N&#?`1`t>Z_+lYQKErEh/3?'*X'DV*Y-0a)J3\4!(C.1/1p`B+;An="Q'P>MJN]=aBQD7%)%/`Ao>D;>>T-\BQ@qL+QM2;W6B"4Q^]@2HQmIT_d&*AmeXbDS.(H;"/NDj(Re#_m]5d7CEgQA)Lqen&odVnPf($g`c<!DgORo!G%J=n82Hc5):'bEmTEl,?B#hD%VALo3gdfq"+3B;Dmm4.ElKgglnZ_>OE2FnE`a-pAP-m:1%gP0:kN'%G+UhgHr8>O/5+iQ0Rr"PKW%5T"c9-8$,0<Ei`PVlh[uZAcsCRk&]Zc;XFSHWN;c/Q=q-J!9IU%ojtbLF+V-pGT>Pa`W@7'2D.pl"O_Rb1eqU26E+KS$-DfH+1@Q%P*ee3'=\aKb;9]m-/OHjGr\<WP?>C;I)CRlTZP>=q$AtC<XXAZ/6YV=,XG,[>,FM+]/>c91FLMMXh@ii9i"t8M)<CC4l@9j,W&lp%#7LH^6Mf5]Yf&c9'W^q[/H=X<rLKuXi#XJrm!Z/Ea#&?Igc:n)fW[e.S`qU#Aj9D[+1,+2qo:_o1gouY+HF(DWuWDYO(i8rI!nWA%\:6*Y,-Phq[Har,gY8*hhD2mFq_,Zt"iTt)+FX<(rjU\s!jL%ch;*uiio4g#dEVchq-2:[[UKp4,0MWk2pTmK-$0'"CK7m5EL^u#%c@8;Zcg`!K"*ej+nUt?`gbGY\FE_TlEj_ZZ>UmeKqI;BMK,+!%k:)_>H1*"%^,Vi4c1e8GXHV8+=@gEeFh5G:9dNplhX-/!aGXsa%WqEK6.9YR)pJ3WdTep,%[_><TR'Cn<;?Y<i>GuN/Z?V@096tIq$KPL^`1Qp>(@IOb)dBW9ppAP;e`q)MJR[_+?=1HfI<i@u($o>W%=h^$s=P,fcHTs&&m%r#')aH+13("2%Y`H;_jc8)'M["Geh;>9<8fr+r7*eJl$;KoZ?+j=ADoG>>PTplhPc^*MhqR#]S.mRsbJhKN%g\0=>_d)GKH0ZAkdMcj1QL`aFCG[5$"(()%eJ2Z>bu,"7@>!^@Bt\ah>G+rc><cI;fsN)tQ"VHP71,>U\h7!],,nS6OX7UWRT3MV%Ic7Z@]>4,E^5GoMWOR>j82RE=PIXB4YlIlLMs"^-fO?m[*T*TWF8ffqWI"]i@)etNS9(fdgkM!.m)?&&c"'jWNoUQ37L&L'oq"!C%>WQ-.@=PLt-!>\ukDK.P/HH3FZ[A4Qq:2-pOJo6#4U10Y7h4)ITX1q)s)tgdEUXtl2fq\?n!'/iG-?LoPBRLX/7\:=OqRGPUBoN[%0<2'a98^1Xf1&*Y9dsd)n<#fu2ennI:ApsE9J.Vl'=mKn;7p^G>NJV^G#A.7=)>SC^MD)#E[@..4tl9i)/?GMeuI;ajK<h%7CUh'%Z6^UDmQCK9&_FHS,(B@I]=IO@4+4PD.D?2!)r=;;oCD<1DX'<Y\!=.Z[B\60BDiM<mU\*Xp`.o'MQ(1G80XJ8IV0L;U#nH(qeg9H%V;0M&AYI7^2\P#'8UC>XH`;G+^NEq-2iQS#lYO+SVd,KJ%sLA1Y'bRn?Jf(=,Pea"#GiE/6/CX#R\;C+UuomAAIA=DNutEI"N2b]%HM5H.WB!*QhsP>!,_G(s@R0Qa,#+uAb09S^<CCoo\!DWih`R+UHeB;]l9cA;k1J&"oOdDnL?>)F(gM%"+HA]B,a[0OJbMKs%,%`\%@a8#/&+\j_43tp,P2X]@E"=ENI@7EX2R\qHZQVks4aY,./a9P?[,kgQF+]LRIV4A%2tMFA0ZI@16Z@1c:ij]MDEt#XN@MB-'*7dX%U30k]cD<plan[.f:;KiJ,9Eq6m*iXZ-aTtj?k&CM_^mqU@W),KXN&^F!QVYT+'&5a6d`bqC!tHlV"pGF4L5Um#U^Ga'.n)tZ;rQp%*@p&B4*M/L\38%2iCft:a*9%PU[iGRV6GA.]D>G#e.:9f(Yd2MH>#_GIc1V-=qROfmA=c*5-cbH00F_k&!sf4+mA.qY@h!a/4A`r%3)@:hVQT,[&^Ho"HPGo/?*`"JV!!q[(2I8A<-f#W[=Q%EZP\B3JSW7FH!h^?Yfr^^nl:g^"!Gt)GKts<:tW^/VfHs5Q-qkG3?HbA%jihD`Idt<5?5e1b3T:0,]=/U?\'i1n,5oNh]D!H^R$>?k/9tEoh0n`MMXTft"jC:gRl:[;o)\1c0W9/DALu<*St75dSm+]#pp6`G%Pl+*6p-CW)SYWT(lci.M/B#t4qo&L[*W)cVgL>0hQ,FcO=<)YkqspX9(<9`I8cDX(Mdrqm[f.AR=<)\,I=#,4a\9?R)*"bIX-e-e%Hp.4noCI2)(AQ>#EUaiLi9Mq?ed+@.[EWb?efa<B/7mWC5-6(CjfCuG-Zq(j(,Mlae^-Blhm8OrPh&T%p1ifp5m7.#pM/p[ln1N.%Pk-nE+cr*&7.+0oPI+3^Fr0[QeqW:&)";,$*05cpFJuAiA?pC]]@'31l]P7VHAL/tG?3>LlM$^[N-J!=Fg*_[mkQ'sZuMBDa^O0E%`J.\d6R$d,$,QdM,kC@0FX]O5&Y=4kOHj+0#^8B;TJ\h<n-Bpk#qS[1M,7>:G).9u2ai:&aG3W\*I^#:40L$W&j_m)D"Rm3;X'cM%DF)r_%X(Sf;0iK\V-jF:LWXm`*#.IUe8PP$G?Qt`gNJMf&Ve(^RsUZC4Ek6W#T]1TRcSeM+GX#rD)l>i5(eP=jrT5I7Og$J!:=mi%Lt!*7fW_.JoX6WAH@W^<TQk.2VdW>m]den:/2fF^?T\7(i"=ai&5Wbc7T&K3[GPHRoX!^.f[,u[h>$8r34RW>+rdG^<&>o<`l;_J%D2M5/^E!Homa:EkRpri;[d;diXVK!>]<7o<DkCMFaGjED]\@^<J&]qu[l(@>fJ44D9Q*.j"_=88*f>CAMT?@bB_MBqM)#jY)kBj6%N\+bMrMf<Vr8%!eoSb>D*ukuo\Z=%tf3Z;FZ*Y"ONN)Ub7>ZgYHj47)ecn1MKMgb%X#ln@]Jb,^l"6\>Y1K:*>/thVDHdT")N!o5%)3]tFB'pHL9R4?<Du#J?'X6uR]?X=,%D$MI:F9gA`,RR&7][mei]*?N,P!-3i]*?N,M!JCEL]_8OfVQ96l[QfDe/$j#"9LZ'5r!<%Jb>'`:+"hb8;B\T-PLDDq;EJ/a2u7=EBdf4`,RR&7Vh>q7N<chD^9U;+VDb^n]&4_k-DC=K'J0jDg$=FB[1mL"DhXaT5\J+'tX7X%FkA6[WXPf)Cuo-nr`-oG\J5Z>emZ!co`_pDU,$ko=R4#+Far&+fNZNE'`\cg^0BAp]'?N+>kKrm(k'/(\bEdYjS`fYJQm,,bO,OR%C$q2O;,@ecq>Cn;&,-)F/D<h<D/FW:Efr<e!odVfU*74H-b[N:V6EaKodlNXeH?f="6p_F<F"=ibS^&1Yh&?M4!+g4Xrh;Y\DGFF%$S-i&,)VIHWnUZ3H!+shW-.EUD'W-qBj?:</iB^-qI:_?#0;(lf5G."of6CVW&G5;s404;0hMBYi'7.hc(la*8P)q@LPjHrf0k@X%9oAPa6`BH6\)$9`lYjI_X'+]bRp88+c-bM3?89!RUh-0lltS9XXV%.u1d%5I7F,U[iH%=VDSuK5Ijb)LT>X&<^7Q[(UgUS2s1>6U%"KPBrn6bsq%psbfkjP;q,`e,_O$^.08BqjB+D'*!U+>a/S^94@rme6%/^&`3IaXs^T<.Ck#?*XfE/C\1P=;G6/0SPH<KNkN=\Uh4%6RH.C8Wr"i.>XG0R_'$4lpF^$-WEN*b!=ACKH_j:=V.8F7G!`dW6sb,@T$5`pnfMb.G77^6Y45i!kjh/Oh@Z)AQ](p-s>"UP):Gp%%9ZCtL7T+_.B06m@$[!pJ6C-SR[TI0"%tsV%##CX,oQ[h.e$Al+$,Wd-'M`#ASA_j_B[kZBOt>cl2Y4tZC:"8eMLQ+C8(uFPb_h^%jFJXm8P(9u,p8'L^OYa.9nSm+8^_8iIRD"aNKhq+8SEpYl1bCDPGdoo.Ws#MJi"31;j!b!oM1[X^_!Hf+C(,hRu([+<[h-G1BFY9%^eGraUhJg@<Pgd2,_9bu3>5SH]n%Pg6J<oX->AmJ)"8OPX/[@pLk\Ak^_>-sGY7t8$4IhO+miiZID]:9,/L9Z<Ik8!$:uFk<D@)-%cj9fII4G&n)Ft*L]g?_.850gJ-<Pkm+btT6U2&(V-*;6%H]F8)%@MkTOsM%!+AF`7[g)Z*La[KBeG2S+IO;32c,?f=REWl&Dm&?o%N%=gkKIWp'"gQ1$5ed:NT^AJ1"@;%iTO9a8Od.e09%r`*VOdrH+>6_\TuA<Vb8Ps6oFPP:S:aA>\Ec;?53/s&&A&+sHZhL@4UX?1%<SBRI"WYJ8^GjLSUM>Vb",R26"L*Fu<!h&2,bcG>ct<uM**L[qU13@R>Q50ZJkYkQ%2>%a/Hf@QQnWch*bZcT'^C8>,7+S>A5F"u%?pZjjfqtnb4[&9e:(]lQqd:FSZ3Y9B@ZJsZDI=^8m7("4P=4=CbjjQs8_-1oLap\><2it,>ZNC5X_TUJTX77e5\C1e:'/LOp]ZQ4%+:)@)Op0?On<p-%P_f1[ZmH\_V)+0CTXln74GZ$J3GaL&)d/;:9).)t>!0)!?k7(4XpS"W3BpLaJ+A:2^HEFR@.cKrl2%fAd)TRm%N0>-b'>DSc8kY1/N"DN]K:SZ&liN4gN#D@cXtV)o#K%B(*2bAo^UCXDLk9K*&Rg(i5+kBq$pr!]-)i/Hkp[N)ZsX)-9@<PF<@T-B%J6fQV\PWWM=gt=L_'h%[i6l2m5`pWF-DPt0+q,\2)sKW'.PXf*g$abYe,UBh8$/302-D:\0^ogOlkL1h[0+g_\d5%oH;D_QZDot<%3Jc2ek<7BkI#h\@lUh>u.I"3i5mI3F`^KZ16nE>.=Q5qrep69'h]'`EB^`jRq./p+f;U\nP*p]Hq[M>sZW=8]7B&?QL*0$%m]9H'%TX/5WpV,Ca:+r#RopaKLnuVi\fqTi.ij&]Q]P+]e3LJgDarT'i/VIMIL)%qAHG.lgk;4r0oEYAj%c`>HTN':.V?Sl>ERn&&*0b-n%M_J-DQm&1o!t\$.2[CQRH<^_Q72;c%JVO@T\)eChZD^TeY(/C*!9nK\iZM]2E'`DFE(^np'3lu?3$P.Zh,$*3=@])WCa^5*>h&tJ%Q4^pFQXQIBA;WekYV#p+\hgIt5R8Y;'1InHP%5;2XeHnm/d;j6<?a+LR)\!hY_*AD[Ut2k'$fPH6Jp7+I9\4;*C6J,)?o?_^`^QP%FYR$Lf0C^XRtDt0ChZ]_Qnedk.0?4FLlO8,5SQg<%\b.mh@_FXAZ%jW<?;,]1A[\&"I]<kMIn?nCCL=Y,p!^""Oj15"N+/,:K*SC%Df?.[6j.rgHCKTIZ@NZGJuBCl0Ymm%$6dcGNok58`B>9>C:]Sh0JWD*6plk%>QC."aG.<k.HlqK#uG*["]_4,9^=iNW>R#p7"Q*r%VQ+^3$=:JVBX._+dV2j+%;cYS%W$6>*u[%fM)Yae%>0Hr#I8(LJ10[c63r-BRF!emOUR3TO,U_:G5qoP.YQ^[;@Po;(9jY<,mZoS%JI`;\'Lg/+ll#t6"+V^Fl;5)(dZ#p@!'lsQ"q-Mp&5<t?:e2e0MM&]@Q5p7-[32-7jHK]Pe0PG&!"<ib\rDo@%DhdhJ;1/pV.=gH%V=j'[C'#9mWZlKqHqsoL$9DNd`E?.&0nE%PiCMqn6QRWo?OFM<VTQ@fgd+k;h>IGubAOnATLkmB$NYl\0bs";)lAFS84r,7)tOV<%,bCD-U$YfJ=m&HB=\2FY*Wf9(@D/O@6nqAl10d8/"<fg0'LZuWJoF'_jlq+-bbSKc5t";B!)kf_5VYNh(49_d6a1&SjJ,T[KC<YD%q_08u)N'1L)6?,4'&bX^'HetoFBtc?";O:$.f.\oTLc0),b+iObZ,j<.DSSS8hkFU5U9(EpHYK'.L1OUWff5`0j'(DJ4r#'&\UmA%kQEiO8H\XBR-:W-4I&ms!$%@s$IJ>NM/l07g*isd-'a+=5Y-m=e:G`71_br!Al+1p0b0Fs<g1U@@R4r;ctGYS;Lec2_I7I-:43T\%7^/]9\OtJ1[u8BK_]'G@;fk'b<L&;0Ys)X\_A<kQ(C2a<M3:G0%@k$q(dSF5"GX+78:5'*^c4C_KN=$hfEPKB3VFm=R#i_LKk>9Z%-KZC.:k7P9_PYJ.Z,Qr%9d5bIB3eA&#BiXW!=9=(6FAbh_!f<hLOg?HUn`!K_[o-;diY;4$42kV0T]/Y?BdDdO[PoNL.pfDkX9pd%FP``kQ:MtrGTe"ORL2DU_s%3sA_R;&"Lopagp(8pBFU))VeMgJ;*G[#VHPH<L?Ut)==tA58s')[dL%[Z+`Hi]V`k=iXjU%jJ^g,8%iB=PQ5ihtW75Utn1eii!%u2+/n1^r?P$oh,.=oVM<L=7!aJmk[ZseQh8u.\$9"Gs.["o/?:j#)u!X:`n<09&N9gMUSK$r#?16<Gg%%>YiEiaC,L1u6pu*H`er7%I"=(ratFfL3tsau!EnGm610,,=r6e1jft3Y3F1-Blde#6Uq]OGdccTZMmW1,)'Cogp&s9H&#tRaUS(%@:Mu:::_P\MS9Hb#)MG*`N]2/^*&*-1P>a"$jT,V"(nKZ.EOKA9GrL']:oq]91((,-"@"j'%mJ!9HqJ=!!L7pM"HgTP_1)Y'Z57A%Jq<jaW*'^p@+#q;0EkXN-AchtMkJtKHXN/=fQ%i.Os\SjL]ZN:?kU9_TtS?U1'm9<@ZY;\.qQm.YZ"/?Ud[T`%:i!7Q;Fn)c%!%c%Tn>dCU8l*3L4MjJBSo3GX;NK?2M'QoM2u(2E$7US;*[do.:plf.it>j7$FD"d]KtapAcBLK,[\:\O<4X^]b;Yl:j5lSD[+>LlrEa%-P`P.W!kdTc%4eg@'^]IX-?3=$c5`o8/hU>5YhF<ZXGofOq89D#LpJCH>*bci%rFnTd?Bi<sfd:i_=sZ<,`2mR4!a<UHmFqCc>/!%k!`RMh>fut*!QZlQjl>A!7t;m=jSdtToDL[<CD^+!19/;.KB\s2?X(<)L:Hf\tD+bqNbP&O,#5RXXJk$BVIe6"QGt^A`tMh-5n#\%UhbR=-AE#e%F/ol9ZU,/6lfhXJg:B[6R.i&9;+](-q'asZ6:.ZkO:VR#3/1<l$MJ7%To:EJ6a8"E>Xp]TUI1_1+sAAqdcDHZGK<R%>6'(+EUpI[<rW<=E0l_eg#O=?>gd`pa\is0""BO^TIW!XLY+CJB?f?8+Gqp3N#2hh/Y^;DTL&HL-gR"O29.EWAY#V1l*<tHbiJg*%;Yf3`>O,6Il&JtWBeX4h/lHJ8/.E2C0NWiX1'&Q_]PEk^d;+uFog[.4!%:AD@YdWu638!D[g>KZ.11GI/i#kKN)]35QMOHYOaCnH%AfPjA`'B"Y!@Q4?Qq";g1(#@*;C%XfJk1RA(50CL&%j9(.Xb)Z",oK5CDma@`R0jCjk?@@N>fVE"kjbcdQdnu&.=+ePs>C>>Ud&D%<GKqI![4WS0r_iOje'D?$3IdX#dFFo!Y?'`-\r^O5VfUH^k+.?'8+@Q#&osVjB1UnE.&]',am:4&h!pN0anoU"u25g8B&rK-;bG@%N*:lGc4ZJ"FNBQBM+*@r)8:&$K:5OT":RS]R]/1RRVs%AqAfhoR:02$CEqCd$ul\]i+p[b;l;[8HC`DtlIVfCL5_m5,G@1,K("89%93_q(PYRc;KFg8];;umeAOL=o>9laUO=&)J7L4[9&u$-2ZQX_ZCm[ou)krOE('q/#;GkeDFeWbMb7Z'/Wrk-#MSud<_`"%`EVTeU%7njHP&>Ql0c,!5@0q<k-!Atni7ha9a0i3_"e=m_TThoR*@SJF&mFV\*D89\?Y*.6>#/Rc:C,0k,Ckr(7#O]=1+fp\$H`0@Z<<!F2%A_uA2@urX`^NM%F@T`Wk!)3fWGIf.(#\IPl%G<Ig^Ng[&R/d;3)i`%`3.=g?WIYB`/3biX8RkHX1YRUt)T1?kV.A:!a&"W>C4Gj;%/AMZ,8`EATihIs$\UH<_R0-=`RKHA"*:"AZb\JWm\n8?HQ#RiJH^UsA@m:CNZ@"JcAN5KU!o#CAr^3C]7%d;6`>,IM:e;o7B*@&@%9&ctG5J[FI1o5&>A]O?piO/uDG+[4'2M_YSM7`2Cc%OXtDd5YJAa83rFAEK(NEB/iY)^'o?UO!Q@?Dr0N0+!m5UQh3`^$g3Yt.3_%D$c.j"/da([&e+=&DWpG%]!eSaEc/72$S%@%da)/&?'7Rs4oG9:f>!26Ooum2GE\Y)F!p#lf;,k,V4\M8eF<EW$85W$!1FAp^/V^%qV&IX#o'*D-4`GY.j=s^")eAERS7CT0X*-C+jC!)`>rZMVC6><l%7i?aA?%$95,750PGUM4UqP;QAB8:Jq64bP>X/R6rS%pN,0,W%Ult"NL'7CsH4;gF+\9X,#_4'b+c<A5!AMf@lRa&&Z.EgI!_fGtOgpQh6g/m.<L[8bf+!?V;K,P=7Vj?;2@uSh(g<*L510U,9#?ht%Kpf5A@"s7PN\HJ?)MfAm1dWN!!`hI$3<un#WM:dsGR02.U,ij!"3/=qOaF8t@"N"]D^#=/9H^Wtqu.it>ptJ&75>0!O;>g.4bRQ,%JkAF`OqJ.!igX>P$**'Jh$pXAa2:;NOcqCkPf<]#:!q2k))p:UR_'7HN?V7L+qp<!&YcS_5lV\$7_0ff-P0_oZGDBuN:nH(Z3A&s%UQZg?V6J.Y-<Y<$a[)kuo+:2i\3O(.$sZ(qae/e@/lN%YJKr)eAW\eMghpX/frUm(Pj5b^Lh<]EX.+VR+c;/@)*e=h'BC;#TFJ^q%@"\t:32`#).E+U"Zr@mOC`&9p`$>t^T8,]+6jH'EK8IKG$H2K7D=-(YFNos7Sm]=N^+&Qr'KR<gH]f7#,e!4DI+K&m7GEp9g/POu%r:\]F.jW*#R@^k3:f-5f[\Q]3KgI:6iY7Oh=feY1%@=bf+Q!fgF%AJprOF4)M4;Bq@"(ia@aRZ,Y<gW:I4?Wq>4j1-J9ZMPf4epA%Djht"FrXqghM#_@r+I)l]18mI<9jnErsqZ(/R(EVd-$UL)YR_QXQ)>_5guW=><-EeBOBeA!+0\]-sKV&k^97J/Vua!]Tlo(-]hKn%O?1LEIUJ-dGE6k8gOLi+8h?\_Y%6sF+3u+cAJ3JslJV;U%2J=n9,LcT$E.)cp+EFfOOo>AGlsii:'C'DZ]HL#(*]`YQ-e\&]F.Fr%.B]eB8;?%VK=8]$V8Q%;=gc4Q#`c0BTan,-.]:hN=5o\J5fb-XXZG#p'Nd==3N+t+3iiWhffu6^?WR!\TnPSE-[,i\HL0i'/`@/:%2*Nt+1ZCGk)W9<S4&6VZ0SaUKkAd_)iRoI8C3`F_aSFVF.Tkh5#8tV,)HUbRe2h8#`&depg44:+_+H[Ef91thUX6j%:O!tu"l+5R%Sjs\E1Y9>8>\,k]JH9V.jQHed+\PWE&nfq=IDH[*CgFPn!o(GoLW(JQ00h1,E1=A:D!Y/r_d"s9?C)1?i5!pS8!<&ThMF+[-jKk&%-W^.XA7EYa-Qd/!;02e"V["f(2TT<^15%`6`[*ED0?4[3%Et4t'HLsG6_`J4JK\f&dqg?L(cF7;XEdnQ/S7LT)j/C=g+W$:l!LL9%+\T4<Oi#sY"\_UEMqmc,Ct5OoQbuIR*?qPj4+Rf85+=KVC#s*!9rkm-Y#=W7m"B',j[E3o2MhbGA#Ei1iIRuRqF!f(U2M80g.c=m%d&V"O@;eOJjk'4UQ=uQQb)-Qk3on<pCLHBj&a\(6@_uSX2tR(Wn>^<"K#_IZ7h!>'%V6RHGM"5_1;W;8$JQE]QE.YdX+iH/k>kbf%#Om'HI(0fAAAP`Z:LGE3o_jWr(n\mL5^qhtTa,YGnPLGATq&sfNHN9'M"7[kF7uTU(8TNqZUAuFY=JY/G_Y86-<l2P:PMV#OuC#I%XiB&'/en7.lBeGu3S9dMGkGN;[;!P<BCNTl\\]p[jCI:9_]Fc]BN)#>"WQ:5DFgfEZk&M_NMq7ug.fmmBA@caI$cQcmlThdJsq-G%-`k2k;lJ`/]RN?p,'Ok:9FZ$Z%Zre/eg"O4<FK=HpCF7#"Rh>/oar/m-'/Nk/RMQq-TlTsjte0-oiZodG7fqMg=Y<;=H5([^`,u-%p&R_gVuHal-^K[lHir_-R)du]Fr#'g<R6<!)AMK4*1"F:;X%V%otnKn_LBnn2rots3Tc\m<JRl(ZLh=%'/0]8/VE^-e`jm9cBmp+%`&l=^<Y37fY<\d@"PN:;?(t+0FJ2!Q.JZ(;)Iah]@@5"rCOp0JnNc2bBo''S!]?]J79PKRmKl:'>n=M'=Z)mW7>lMCPgS(mZ>T=n%>F)4@k/H'O7?A%h<9m7OKl&sZ$0nF@6s]5BmpN(f:qj@:<DQqecM)QKUoJ=S@-X,DM053Td$CRMJV>ts,CPLeZ1d.*rCE4#:ko0R%%u?fJR:nKM1$bp%.NH@II02AN%Tt`kP,%,#=<BB_3$g00#o[.\6QR&jkTu=nDk]/a`M;_nEX:`B*VgMX4d5I[G4c4+<34K]6%frS%0C8brC"E3Q;gY8"MhU45FW[EPB1&h1aX3*mYT7JcK!]u=C#]3I*_M7[VAWg#Fa3fL+-8DPfc;t/ENKG^iHcWC;bAu:q9l0g.44-q%d/!j$X\(-Z4dNEi%_Lsn-mC^T+?eIAiJ_Q8Wt(l[+gab6.WGImAK7<YW&jCT$4bXs'3&[q:o,Ji'n.\B8=:.3p7s`8B>h/EU7A,&%R/Z.HO`q*^ldgXI@l1h^[KEA2"tNB(e%#;XLcnBX2Z;3W+=:g3XoEga!%s+qQNmLj7%1^ii>MkSn,O$XTdRdF,Xi6#e&V]9Em\L;%qrat5YP%rOY&S8XUa"+rAE-<gp8LRhcJ1W4'*HXY'e1u=mfDtXLH8/bm"e29DPdHILhkb]:'VaaBh&56f2F)q9<ik!<QXoRn9aK=%,J)k/0P('K-UF+/;_*>hACSS)X@]Za,HjD@%\?"+Q'c+,WZUf]@=lYI12P"oB8=bBT"<9>S;J9hq:6#fHM=BI5n0-i>WcKgFSWG1%_FX&<(_heYO+n<nF6u&gDMtjW1dCYkHg61,7S;Hm9IBaYYq&)u,]$VXdDYm44\12@"L;Y*Am<^6UQA%$g'^r]Wnt?c.rHgS6@k>;%E<Cqbl&eTo%k/AG'o-$sg1-;U*se]`*\gqUGj]sP7Qh,i2eW=]`&cq3ce6gseKJ6G^)/\Y:l8XX8Ar<;4S?B!T\@2gD48qc<k?-*%Nq#B-,'Y5pD*R)c!c@mbHKn,ElqcErSLi#l:W96K+2#aYlCmaCP_HM(TduI(dF@\eFCW`mTK[0$D2+M<,1\E3_/k,M$Y9/b+adR/%*m!Y98k_QH/jnJ[Q1OhA"WGdECLP5c-hB<$nij;0MdZf-G4H^@rJU7G`e.'%['>G>U1m!0V@.7s,BfH1;_f*Dc@N(YdqDX?/*R(8%?RKN1_t8eq9F4Z0]2R^J-"-*.Fe%FcC]+)K%_-5gJECi$P[Ne\3m7ei$Q#bs>ahN1(]^Pt5h<rj@[hP,=<ZQ7ME!2^;52`=]PXNJ%,W2mIR)CX3>boF]-cRfk`<g4`Jnnri7Kj=822',2Tk6<SaH3f[n6$NLL?O$ce-LBO&Ubk-](qi!XlqLr9CT&<Uh#33)CSF[9'GIo%CV2OAq!`jr+NT>)R65mI3H^-?jldLi8N[R\J8iSkXdJ"".X!VF#A%-u<o]&>]W3FO3el""M'CNXJR.%0l^hk_$la=9EQZKS@O5)3%V4A5L,>Kg-D6Y<NY5ptZ/P`15#Rp*l.9JG-JRp#Y'BKN/&#aoUm"1H-n*e60"X\pj]'KXX^-+._ja\UYFhhPl8Vl`5<!\TbYA@Ga%EGYt;-%1dV;BT`cmSBW:Z;VfHg%eUWd3>u9g&=@1"P3;0:+E:$=V*`@!!/K&a8deg_oIm-+)k39L#H&JV[WhBN%L+o`p*Y/QPENV%@4fkOa4__>LPoP`AX<ToDr&B@AofXWZq,c=AcrYaJND2(&_B.AL`jL-TN)e5o@`;\G2L(J91#C>AHWX^83"<^6u;c`L<]'^OErkj%EE`9"/?FJ*qaf7'e5nr$^u.gh5i:81NiJMb:dFCL_HZl-Y1RL)KKmNc2oq53WcqnShG.<NLM3E/Ue]_K4D&a"i)qr^E(`FrMP!EG%4E1IZ:^\CM\'=91(bBE2h`DX)KOO=LL0bi`[VmDU]X]:YQRI5Pj:K[Gar[R8OWTY$afp(6Z"%ZhjGe4s5_JN'iAb0`(6Ale<La(H%@QDLKc\2i^$SE/.Mc$>"VNM/fSjEp]K8Hs8Q`>lBlUk?9QFb@i%o769O_Pmbn4htY5"-rMZk)2ai\M;kVS5N3'u/a;<?+RQZn$8)%9[9)"ULPpo3qe[cU^)DPI9Jq=C%rTLidc&eRcq-%iUd/Ql%/&eit:"54qJVA!$NEo1Ge8VrB,c.ORnN\"O?;j//m.O4ec$E,ob;X%H7p9#/1V](Wt.sZ,_I7'X)ggm!=(<WirLHQH7(9`!,[2WU`CKH_P_@E@2fgg,Gq,kd__*Lj+/EWMaf8k>jQRNLurq3d+LZ<4S9C0%,H&6nc8]@U&k7rB_P!>8d,`PkP.P2?Et=A?#o4R3L>X3<>-0_`JrOimY,$][mp-@/;`r`!iYYsb@nHHL8'5$0>2$N@ZG20##t't+%1N]#tT^UH;Ap&A;U9jY*L6o![a`r.LB4QnI%1T<;o7AcE#qWfa1!_VIdudlAOfZPi>PlD](QZphmY),$>VYGBEWZf,D@B]6j6%^-%c&97KUW7t=!GT&qIYC2Z7p+(>JYAoX.K'0qIN'<Z#"1mrY>MJ+WQW?iP:+6&S+9itB6I-K*F_L3&dO(!D!MuA)Id2[XAZ)n*h,nm%hDjm1%*`'-WRXh*:@J_&Nub1Zh*MKZ"P0Nnn<JqR]KWQ:o?^4_=feS)gLL:UHZZP6nfgr^L!"!EqDoO]--ZrkO(d9;?F58[(>.9?%D*DB(K!$+#KXSF;WgTj`NsA&p":p#.\17GRKMfY6UK2qe3np8`;C0_n!Smh=a8$1hC=.&_:sn8i.C!@INZl8#^)[ESION!RHLL](%4JWf#mf5&unj&G&c6:;CHTYH_DdA<8$qcr9O>ip[:oZXWo"Gn!SL(4;=[EnVhBH3TbZISGUTK](2+;Sg^in?R6-.fiMda>Z-l+)2%QIqH@fXW7iB!(G3N.6q#*.kG%4*3B(`Sc9s39tHe]#^@<%E=0&H^lV<d:72*d9#kVhW76\aqj%C1"u8>.FBd_==tH!;+-+EG8uuV%3s<mm0R^e(p8NcLl[qk[BRl1gWdIP>$U"Qg#tifhOk4bD^;*$tCm:1Q@.Y9;K\a1h5hC@%!\pc&7$%kBL#s#aNfSC(N$`=cOfVIg%%k%Z5g?\79fojSfHAFkHTHcS?)p&+$4,Z`86)-9&hCFFIkK]>ajF?2,fR9pTaTk^-FQ=p-F<,URaSd=(LO2c;/sS!(-V'Q$9b/M9%hMk-J0^X5FanOS^8574&;*JmmO&RGV72]V<)-K3O,<X?\+OdkES-NKD@BW]*<,#fFK[f-QhT4%lIJQ?cKHgIg]sN?d:&jUMLLLYV%aVhZ*CXkQ#hnhC8oQgqPLltJW/7Q&H?numYr44nE3J]Oe-a?<5''r'6OV.gOb.:'Yi2c*X[,bda6R#4QpG]>-ERDt>K4r_V97caA%?G+\[TfYYP7Vb#NC?u<s'=6R>&=ms<?``Vm$gKa[/5_#!iSFsjT$$<\I1<GL)=H\;1s$7^Z[p4^"jO+b99=mk>ok8,@N\1oKh%8[%7^NO4&_i%doSM^rf/asTk7\`^G+jNt$!]_fCel0h]/E(1ihpUDqtH891<1Ja>b2%'`cZX3e-*j39o<e^V*/T^O<W4`".I:&J901i%FrXKh2'EH\HP%M%3K25`J4Q@9o@>h-N*nW)3n%4%`=<)#+)run[9`/9`7AId"Moi4+*>`8DHrEg$j/(nc%AT@@P<hY>8?Kag?'T=%0I=UFGf+M,Y($#RHB>T&n/V_DZWEb+RrYp_ENW')2SP<R;rgh6g:`Y=f!r4#Ygu@5C8/]gj@rT!hBm+i5(a-78Iulu-JgC@0sN*M%Lm]5]GdPOZ??%8(G>mp8`3o#@V[j7=N^;7Zm-:#"#=I%3<:e!'G49i$VM4/fjl>9ia$b_&h>3NHcQ=2IdbB:AYiN:82UPG*&DCE1%1S$R#:uA\lR!tE24?=*f_6&LoDdmVWk0n-sG+c?p?Gn>XZ]Q;\1Z0J>T?T7JO>l(,Sa%ELmZF,&`P!OK#XG0],6Ru8fG:%A_cb.2%3;A$MY+UG.qO!`j0S;3[,8tP-([`fR@YKIp*WdqD$*uipWT,-=b=AKuilQ?d$.ocA13ba@4p:Q4og"*lV+NbnURJiNBEAa)I3!@I%i.FnS=2^+9]"0.-"Df)bIMroT,sH(CHcl9c6q!D]#Y!GXq-#%DCNn5>NS0`!56PZnGk-]q'C\a)9l[P&RjP:.H2QXj`dLOXn!X7$%[aI:<6[#(umY2#XH90LNCJGKsiWni#@<d\fm,[!Tq\S@BnWXjmR`@)GY?1Z[q,c'QmjHpUs"IQk_JIRK:696<ND.6SKf>U]l+O2c%rJcq20N;.9D1t:tp[ep-IB,*UHbi:;lriKOVSGe[*QLuQ\l.>m_a(lnZ"Q*+8=]Wtk];k7M$<\pQLTE\OqOicd1X1c!Kf!F,KL+=%6@5LX2LRkNQk'0u@2\]E/B\\@$L]t?JW.,9KP^CB+CC4Er(VmjKhEeX/d"sQ<L'O9#_BiuKsau.V#Vc/pl4]gS5)AWhKjPY##d<:%T4j)"\V_ue=%>K;=Ek(_(uBi-[1+\%:=b1fkj%LWb"$7@7k-Lu+A`;me*N6)lgd^OK=bSfmQ7LRd1j0ecqK#N#;cq]ha*>7#&KC,%DCW.Rb<c8Wkl>_h,96uo"+.=`],]:Y?-g"LJ7l#76aJf`;lIRhp,^mGK;&,^mAMVdMce^VXklHKNgUrE`3fX>@G(`*H"WLX^k*]X%TE=\XEKR7[0DjPEf#aikY`cdQKQSr&!7p?=H)$_qJHn'!.]H3pn4CqL72r,p)+OV!^/s6"&4f?NKM_<tI1UNK4\<1`l`NU+&f5OI%FN(ad4$Ca4[Prjl'7KRHNAeL5IT[.C,`o?bBC:c3:=RVAO:&$P_9`0LN,AKDd#Fmh%3)($%Rc)J7j@Ab#LW;.LO@59JAWGLM(lA+%P=Be8QsC_+Vkr#tkic!0KsQe%[WiBYkak`CWJ:>^TVNR\]a)CNZ)q&^[8N8^(\#hZ]s6qH)KZ;;06T_l4!Hoqfa]Bma]1;?l)J6a%*Kf^XI^+$0Z"6S.->^K6p!D\B&Q*&hq$rYYBRj1W$P^_F(Vo&Cn"^b7HW/cd2jY*'7""R`VYjZVV(0?H#VXtq'q.TbR3WZeCZYDj%&`Q79fNc#9FK*'`j[;IGl#&=LoYL8kOeWlB1pZWjjj4>?")Pa`"2(9ejL4Jc]*g6Sb^3>^EkI=51mL4>22bT:eBV'W8_c:R*kC<Q%,%\;(77A?5s6ri@msk]o07''/;?id81u];f;a[!e#JTq]p]CPNKbl'U^/0:6MJNFUdnHBR;B9:)H0fNA[>TfmZJ><u!*nE5PL_[^%aI?u$9m,/_.cU1uIH#ZMKXbU\^*UQ%(<6N(FkA5M4*`dYr^D*>GRk(E;#-s)^L$T"S.Pr<oiP8#J,SOU^eB1gK?s`mHU!<P*X5"K%VJEep="j@>`_@2d^!pQqG*'1OR>d4+9[pmiFpM&g5tDA/RNkgd/R7EG4D_5uG\9T`0&qB?J`KB#UVh[D:+)_=XD[C#oXgEXBXf!H%[P$#mQY;I(c#Qe,%7Il@+kMISS@bG)l?7[lW8q)'>RD!nC`lcpYiqt$XFccWcp$Y5,LI<Kk3!X)6Sm:lKq0Sd+M(-=E=^MI.*,B(%IkD5A$b31W.B$u58TGVu.&o5.#=_T2&Gg$a+9`J1K.,X2!66lq)[o@pc)i!EAQZY:HW!1BEYu)CJLW:ZB&/mLjCr@8lKJ<4'dt9A%oKHu^DpAFF:%fc.3]V>[@DTSr-b:Ng-/g8*;db),<4TG'^0m37PlBo^^6=_=+:$iY1N!k"q@'ToJN/,-F>6cY:dDSq5g`?;6;tNG%$!Ss9G.$gE5d,YYkr)<i#2L;Hl]bAfQ"'auL4h8aq-_p,q/oUnZ?B&(,si-<BVW#0eWSQBQ.E>ST20K.c5t*3Fl%rNOk*o!<Joe)%k$S5uO9iT75`5KsAKDXn*@26X(s.?C?qE'N`_f.%ru84[W1WN5'sohPdojq\qko?/8HZCUCeRS-;jW?q"%f/i*CT_?LO@m"P`LJ/%+q.NanAOL599"5C=T>@fT*A%*m0oO4ap)N7%n%#ABm>9u"=Dqe?3Db?Qn4_8eXW<bA<"66]Nd+Qn(UfW.WSn_F;R%Zej.b;r8e@e%)8*Ao'3"%uOg>bC#Kq?0a,1$U+C\pYPfO1K@5$mOGXK.t#)mj4LLedY*E"erdp_BYb98"(<r64P9'8l82E6nSV&Z;sbY%C@UMW[G%bKrA?I;B&^n8cb+ISs0e"bA`th>P48">n3p*hCt.?]tg7Q)Yr:'<-rRA$8--EQpStl%F\>I8]^NS@J`Y"flC`=VU.Q9M[Lb$k:Ll%HlTgO!$YB;kX4[-=-"FECZ[#]NZt,^7["%IT$eF';caeFQIU[):HO&:Io1d@UDL,:V]l@3[NNhu9=9m>=(rq&!NW'CL4,?$4Z<GK%!A]42]+'%tX`LI:HVkCYJks)>ND[b)=5]7am[ES<lhR(`0FtoM]md_GaT#CH_mX@S/44ee+5ggBY8>+8^Tj@(@..HepGX?cC78PN%Oj)A,%q7<1hq1"FdN4D2RlFbA'5<or+c[WbX["L2]N9+QakoP7NckK)QspPsE<L8$2tB;IN(cV+NP-!hTaDW>N9>]lN*TGe(-tT0%9bOL#!6#a!fj0uC`V00p[Lo#HEJ5LQ'Obq;*7eqW6FkQR(6NSIDH_^]r]N.`9,AM?\5Z&'bD@;7C&;q4o0%jt8U"-]("1O4k."(&%`YP3?nU%P(gC$:/\G_(o3beBGI%_QV`r3sN0Y`BfQNs9<2iVq"O.';Z=!Y</>7q>QUTr\?SMr9h,as8*dS/PfLU$cUR<tX$=GL>Z%_-U9qOp2-X+"@:fcf#Ck^q6<E7C-C$$5J6CpsW$,A"B5+eYbH\0#>uEfRVZ;1aZY:GBB3&9sX`]rC9=O4ML':MOMA>d)]BrEA70I%bR-0t5l`N_3j,WU1smOd1^tY^o3`8*1MNa@D"#=fkBd]F>&dCJ0!GXlBq;j\?s\@F3V>CoU8$lO'N1[l+PBK]Z?_SFl_gB=Ac1n[%1IXNl9TJf;Kkj2=,]"1&bD\U^faLBJR9%`'K,`/+^oIQ0Yiu]]nG]\O0:l.?=]<.WA8e]GJ&#A2#)?!kDVgAdIo5([G_BLu$9CNV%D(K<-BYha4%4RkPC#1*k1*R#fo[?N5OqtBe'gm!s?4*O=!p>Bg.S%U56r[(6Rl'/)OBB")34od!Y1_Gh0h/2dH#bSM7>08RH0,GB%$*q_%;_5S#Ba_co)\lig14kLCOZ*X-d;D1o#6F!_>Fr_dNM3o%pCQ2Cmcsq,:36e0#>o.AI`A2kHoa\^jSrNDIVhGoX9OI,-(:7V%WAaO6jM/4EiF?i;HFj/!dI?O@6B$_``hS/X*5lIQ3Z)`OBj>h9##;I;7ra9ESA_?l%bb?B0n'G,!e%CaqC<t4QG7Pb'_XA_jA$Oe%.\WP"fW3/(bhHOQ/bB79K*C%<ck$%BX9cKZIJE?=qW._N7*I>f,k$idhA'+F1miY-9'f;.XKjRMcr%HcdjlL5Y`#/-[*q%ZKJZYY%IT&h><6VO`>_\4\+-c-.Vh2Zm1/a#*7sE&QhSDshi&8\8A<J@G>R#SFUNoH";07*nD(N7`Tett'R%;/D:)DU^GQIdoV0`,kU[W"c%V%=AfS^>GX1BKP*#bt=/o1uq-1N#&:rd8iQBukT6e'doOpC#5V2F"!r4fs\X+YoYAX2@OofZCb1pFj\dH6YS8cN!O=LlB(Y/2.jT%#"F"+@;a:Jp:@K,-SW'[D,QRHaD1u(\.oa['"lb+0U'k[5D[PaF(9.ki!B\i*q')j=n"\>r)Q$93ZKNa&->+i/HDMq4<&QKPtU96%HXlN_'[lF19M(0pQ+fHR5^"/1VOAiYLUY8?!o\L8pk<_)/%@SJr264Q_"c=bXQ'0uLgg?-i!>^!k\I?]K=nJhnZ_s_6tb8W+IHhr%Hp@Ar`B_*$,/u(9#)]['(iZY"?1SS9WDnQuC!^9&`2]:(3n3_>!!HqLoJtbn[&[<dKjhHB0JL46BfC>Yo)hQ1V2HI#[;3r[Kf@:&%B@7H.!f,9"Ci`_1[Y^/hN<*Gq'OQ5@,^?-eo1N%r?jq4B61`.7+=dqn6jCVA4;tkpPn-0M3)1i$V<=PpdM"Ub%j];KoE4-[4ci9[%dBIFhh^-'pdY#1h^Y$U]L7jOM=^9JcmkU;!OWis46Vu533uc+^,(c3LR6_/;d_[4DbcA3k%rC6B'*tQGBI:F.QPr<<57$gK$YXW\%"nV-k>!Lk.$iSd`fp&S\N`a4VW'Oj"Ub7=t#OHc^XGpnNd,*'Eb3UZRNm(7eU0d(sOmrH!M1R0!n08E<$pU*J5r<X5N5&Yu1ZOAr%)'BU0LM$JB!XDbC&RYgW'.Quo%L_,_ge*ED_>Z\Z`,Ej8'FkCaT.TCRZS@IeN:tU6m`#LZ,"Nh3\5]+>.!Q+'Pu<d!AXOaVZ&A5e%c:FN<.tB$k"+krAIlU%-Fqd.`NmTGW79f>%Mou\DJ6[Hm4D>@s!IAJp"%quMlJ1n4*B*OLNInZ90S\!%i:c"%U_o/H?88S://@1)%d5?@!>oLd\>UAn;k[EnsU<5SN4tX.nX2QP*49dNmf0]_DH=2[jqEtn%WZW]',N1@&%]/Vl]4o^_O*E\hZF9<E*fB:L+@`G45%.QI%E8O`)N56?t@#s<-KGo@gP!R#"&*[,0"DrMsKFSG4aH5H\#=_#u&8lk5N'4DO$7!^QLtr@-"_f,U+q,nF4J#IfEKh)i!sB-Dbc1`l%$L0=JH;*9!IQ1+_DQiQ=H&srQL3p/-TEKu=QLJ&ZJi8W"IW*XbI+0-(^7gIEAfTUd[:!ug\o*[G?#kaI7:C1`W\`l2!:XF&=Nmds%h&^bbm:<`H![=a"miXas<,urKn$1?\hXY;XhZ478U;"*V6]+=U!>f%R%S3<RhuV5I%S5*`DH#C8;5uP93uIb>!,131!t8f<p_j\)%K-6X<^g*m^@OJ,S0qbQ.6'B+>,2^50/tDbZ,9NKJT^QN*GA;5XRHIHOHWB<P"d4]2<f.5X"g%j'aJmu:*"/.B)CSMe!"!B%MdRaE%j2W!#<InY`_?MqeXa2+`BJj\+fhDVUfBs<g^2OYFU]0YC8e5DWX@#s)H\\D&>q`gY$pmTA!.k56Xn#$D>_2?7Yj2&0]+O*Cp)%gK%g$(f]5ok*0./Q*e4.'=A:_Ks5R1Z8L&'jp<R4BIg[m2lc4;8j522ao[m'RmOkocK:`7ifpWq&^r;Crr@;R$K^)5%l=Mntbm\I+-L%GM"bq!'-jtbXM=;7U&2\;AGU^_n[rW)q".(2UY<bm7r5J-Ir.)E2q!%Y\ZB=VEs09Ak!B6&OR\L@jZcPe2-5]2(\GX7&@!BZO5oR%?,[u=Y[iG2_-k[pMTVo'5j.hrj4TA.,3bmP$B*(5*4YebJDS;lhI$o4WYN'HN),,XSd/-$n1e-DR$X]6U"h0f<IRZYX0c5G*=.T(%?2D9BAXdN.'PS_fMdfb]olN08;me'H5a2oaqt2(3`[8iP0S[^RdV;UtGqf=T&^C]\<`JE8*=up,&3"c4JLqC7d1hu3cE3&0K+/,:%qeW+aK@j1XUjT<nkZugOB-en\5TGA-2EVP<Ulde%0YA_$"?8rmF&_/N,"rS(N!kA(2e<biG@M#o<_A\@r4FW9aN=]+`aYj(V90R8%%tOd,IqK4V)-nIgQ:3]H7)C\j*I"WB"m_9)[YsMo\4E@K-[oqI$'7lTX&p\9reQuqq73Fp\S";oNnSqM0#QHbkebNi<=Wg86W;o%%P*,g2.XZ@=;7n]$Uh!'$Xrtc"a%*KL(^fkLJ_>^d<0'62MI':"oJ*mE)h8Y8V<.k^*F1#YU:?p=!;?g;(He.V'Y*G:m%ug\c.[M.%pP=/]/oW^OC`5_GY.E6tS.IhKB4$rV9pt-T"@AuR\J<b55ktmeZm'HhJ[Z9s>!1do/GX9ZH'riCU!4esD.k=<\**336$l:G[RVU$%j84f&9EHo9!N9Q>4L5X'(on#tKMW78SDJ48'8-lq'tq4QMkQ"g9'%oo2UYFga\hrAP.\->r;DK1gjC55_5eUoCO8/-LrR>[1jB&t%FSJF]#9h(Vj!C"NPA&L@[McG)lX$OM&Q^7%!<p3V_pac4*+HTJ\N9t3;%09M\Jm2fh#@h0FjNYu3Z/BQs'4,fNGHA2<oo=EajaYG%<SG'E]fM*)]S2oh)ghUZ]YCH-Pt/Y56OQ(drh*VYmLZq'9=`.Z2e.9LI`sg4((0@%aG<6+B05=42&GNIanuSV85nS\9\smG#:+G;%-h*M:SJ44,'5@/r-TgmYQq+>sKgG'2*g4Zb).SjP&L)=Tj,mUNO/\j=G2`'$!e^^Bdq!a#TgKF5[%Ke0/Im19aqiQ5jY9^Y/Qc^X%!_57mG&Modim:?J,8'i<\T4-DMsZS=Hnc%)8!+X%^!Ia_@^8+k'Z:YER%f>Vn7uOs:#RU5iZ2BD&0+^bna)M$OEH%g(O9GsA4No0%=(8NV*QIYuVs=uKhnmHc@u?Z1WG2DM>o#sW`<19<[;M<YoYnV>,bKg2al]0Bk&."Y&:"rR?q\(1h$A<J)'F*D;WJL#N?gOp!@J^N%XH7IR"+&S7OA&Gtb'"nSFmEl0A9=5W0m^j*WtTW/3OptV4-7a^dlF4?`kK@Up=n#T\M6c#B6VSX&9T38oe)Mt\'m>p[)VUiEpRYq%#5N;ue3<l5TTLcmD56qD*alKk3<#Gf"`cr"#C<9q)$V&4&GZY&9UcOmXT7F3`ipV!4"Nlj*sB^jo^,+Skf8Hkr4u\SDFmn,i#RM[%[A!d7lfq&GZ4_8d^s\fTKQmtS3G8M5%"cH3b)\s'0K>lOm"B@1a3KAm7&b$a$%+eQf[I@BpEsG?PTA>#4[MG/`qWhZ+VS30Z*/*,%NFAfrAoFDUep+]2'o)-;M"qmOk;1#5DU'Ydc?H_f>WpLgTRf_OV^YI]-PYCE*hqL?nG/sN\+E\=\1_?=?@g*Vb)i0'";)M`>DY#A%'CHGSirmX?$&l?.DN>hOp$7/_p&N#MNGh!5HP)4'Tm8ULkfsEq!GTB0PM:K<(fD[:aPVb];sJ+CY"7@a2/%XSZ%cE3a[YPrMNMUG%r;K+L#Jg*Q%noV78-j5tXsjGb&!'Wo;*I(6:TEfdjW(;ke>!J2EJ`c[V97@1F?B<1C$#nU2`c^nfpaLY@A_Re3N6bPBeIA\7!R_0%>jXh^%1m`M@9BIGR;.Y)@4fY1XgKcf7'0C(7A&k(3Slq`b`jPlp81*pF:hp#lrZ9TdFZ7`;6`njCa53rT\LCl7=YQ*;'Oe8GEA,C%d&Mn6pI"HmE4]&p%\j-#n4q1,n[&.+*2%43L'K%u9rKo$Omm?["76RST6PoGL@(($j-qI>_%T=:[62P,IQ:h'%)ZRelP@npfo1`q%\'e3u60(YU>U5h=SN[-Q38a<YhN5B'9NZ>Jd7F`7,!6u=!Q)7Y2(Q^*+Sp:CaI<?!b2&sNq%rFpEpnP^$Uo+k$[eQ4U#Q0pjiL!a%3SrUuWb=[0JC#@MS`?rrZ_C]Rcp>b<!dZN>>a-fnB*t^HWAneU,4bb#NuK]O2)ZC5!P=g0l-^$UI<-56[t7N>d'Zml<SDjS*Z*2o%Gb_Z=*P7UP#F]PLck+sqkB/VI[S*$P$8-E[(^G'$0jTU71Fp[n302J[-tj%D.d//@!7CUI3KUnBSRN-?VCPaa:FH%Ad2!=?-c&I?%Zj8Rs!BpK]b+H_/R[JGq>^Fr:'VBClK6Ig;5nK0Z+*j*\WJ[3YTl:U8WV;C0Qd]Ng^p%(CD3$QE,Lp=.Q5$`8g<)@m2PGT6(Tk#g%r,ma@N?1[G^AWVFqFm_7qsa`0@D)\Y?1h^)6:N\9TlaWBnW"t^Op9o^Pif3)0'2j4A"eBgVY*),%FM$Qa8IVf289g[C"_d(`,1,+%_!$RS"bk([QHViBMIu2u]SJti,O81Q5!]qBFs)L(79`ruX3B#o.uVF))oKg]bhLk.!A,E.SI$#7jM^m&qd)7iDeumNR\KM&$U?<T%p`Yg62aD^jI>FcX]khkJFsu`jI$J-"a&F</hOG=&/]<Rg4cCT@gf/56&[YR3BKMFaY4V%&@Ngje6ru76[^pF'Y:c0BT*)ThD="Y/%!2,Kc4'Jp"%6?LM/m8Bc</7WtWCB)d*s_-lNIiY"-6bGt59,n%H3%d,C8&uK(;sTSN5gU$\*u2PB\S:L4YU86::BDM#]ZoM&T`NQ%D3A&%K>9Elc5m:])0<&@NKnmR.aHY@fgO\7lV=/VCng%30(C!X@/`A*mYk'4%gU43J6^0<A"M$`5`3/IZS$0Ri&%2]Yr,!VdW5_$%-KTA7`J<N3.s^`#M?WI$"Ph^U,$Rh9(kq2Z+L`<?6qc1bGDg4c'g.9^324AuMNm3gPcbL8ipOe$;5;Tu+np;qG00L#(:X*!W>U*K%`/Db,[H-EqjsM@>.h@H-J9E"Tku[gc+#5Tu3t@m_gOsH5C`8<Qh<@2q[4<OmQ_m)3'U/IY0Ff`/be0K;9\1STXlHkiDt++ba%t=,%?6-I<^9NlGA+*chpQ_YT`m`Qa9%i+*qKp<7N+r(]]1`17XT/8/b1D.C%6Okh8arQ'U>FpkJ5CCi\(4To#QFIis1ikJ1<keGmNd:0%K8-jY5,c9sC;jic_`-'1rneLib;\[_nN7"s#@-drF>@H54h=R"2;mT+<q3\NFd\RmgDh'9!,D=P6?HZldtMn^!9oFCg\IQLp&1<]%Hu+<eL",E$d/!/uf`g9lCD0;S1Ct!Q1G`!Hni["YI>6Ka9+^$>=LHk1Cu,!BIK%\5$i_#)jIa.D"+L+,=2"U^+*ZgRfAHU?D>O:t%&&8)=2oPFd9"CNZ[RRW5KO$@pHA:*?^W7qM9RGo[:#3tb%lph64[ZE-!5Ss9A]j[>k!)3j"tA/FYt1FEU.3#(8*i']?rX;8UhPCj%AM>SIJp*7mg08biAdi=(i.[h_l>e5W;\f(sMLYr;lejMJ'Z_ntg3#HO@,.m?jqh2q1KZ0bn>'C:o\!T);;h\3eoKgVOe`K9j-2/=%1LF;*qa?l[\"JW25P9KnjbogW18lqlkX-1_F"&oT+>=^LiM!N50:'g@69!e-5j3"qo:_&1S7)p?RkT15,p?CZI#P-,7"Gk-Jg&.Z%>@!s)acN$^.egsnC"nu]_ZnosAh^tSW-GQmCE-#>HF4S:o:hDa4>oIf9=b_[3#K-:8/ZB9]+O,A9-m'lV?4#X?(2PUiITYWpqZ*b%MF^#$N$oDu&Btm`obi]jTRf[P@*\&;\.YH[6TtOXdB9Te'$>/_WU5^Sfq=*.rJ?o8VSe;X!.Zag-4k1Q.g="7&_l((N9$jf+"rd-%=%U(4l'to?BQIg:L5)jYic<C-F;@2K#s4b8CEj[2E5^ZIihS&@a7KQD3I1fXPp3QSMck!*9UZq\[peigFbCXS0W,l;9J.b0TB`KX%W"Gch\\seO/"dXf>#IaQ@Z3&C-jO8^Q,q?:9?00B57lPWW<s%W81%d.Bb_AWKD[^-e%#NN>2P-:`EIWAVs8M#8S2%ce5ZoT:6n>6%ofgXcZ?R.L#_B)57%=AtcWh`QbG9Lj,D"((P\_;Sdo;b.+rVBeWAbPfo"pQg'Qj]""m4MEA9[Cc-qF.e8L-_lgia3q\fQ:OG2F_`%!lq2fXrm*P5anr.l_'R9_bute1-R6RpL6]8c6T*%QqI>YaX6t;oI_&K+soX-+dG0h!XOiZC8V7r>)[K`N9QG`+:uoErQ<*:<:W:d%c&+nbPruc>#)%XI9dP9>"d0$,f+4[+!:6`U^l5-kbln-mf;$("#h9/G^1+7>DCXG-(`@[m`6^$O[U#"AjZT83o9=of5\r.qH&#pQ%O`:'QNT$<7Ps!5]OINJEELp_+/BP\!>9tr>PjqeRP#o?E]C6h8?Wh2NY8:'>KK5f'ji3f&jI\4sfCM[jYq^Cfg;$(<rZd0+Q$"h-%mLXsdH--<YW+'T=<dZB1%Yd3\T]T#)YOg>fPB;isIDDeHBBe.5c2Giidd\sN1$[nCA9FG^@ZJ=?fa-[`a>``Rm8?Z48*4KbRKpr=%/aonf[6+onkW%`F&#^/uTD]qMI@>rP8VJB=l\Nu+!l;1bctR?CGtM$)Vh0<GbB&Hc3#2%P7]gF)(VqZ,5fG)_1k'\hbOgHil4Ync%]YhUp=+O/d4J)mhX;s_)C;`%!;q4a(_GuS&W3$ZhP@?^SZ^<$T:c!$U?I<@XPJI<q_]8m9P2m:pV1KaCWMHMR3_7tnH&"h&k-a2<%29K%dmX(J\\qf5fZ;;[D;MC:"*m!@pd]oQ!1:/N82:(F$-\tCu&'Sjf6g.g/'1/^EDT/_L:nYU]Jf']^/%D2RR]5Ek&68>)R.dlQ%iUHh4PHe`2GqqK0\?dPW\(_'COL5OYe?,9c=P8&R0ZQX*%At=hIEeNm6lejq`_D.3VN#D$daTT\8s$Pml?N^a)O)H=]GY?M.k,3Y%c<\H>oA#@P*'P)gFD1g2Un2d$hs1"B2CJl?2e??&+I7%slW`tK#9-Ie+4SU%?gJ<Pc>1J-%\S!:rN,lsfs@e_OR\<D0$Dr(9pO[\%<HfRck8i!ZHN&Im4\t<]<`(,f<FOR>:leXL4g+s^gB$:*o*@dt-C%`<83bGf0sl$W9&a*]e3@I)@%5W>8m=Lj9ZrP7bGgKWO?stq%"56dd43XG:3b2&Yc`_'%c`O"pNMVGS)TT3jI7U[,"oL8r,B%Df*-T8&.R*J6O]-O-NNNQ>pm`et.8)?/21>BQr3QqsS<;SF&)c/b%Yh]<baAUFg8WqY!8'_N:M6eK'1BqNoIQTfSg@<?T(9OqqVPLtg!prnM6<O<O+Up=HKYFGk9M*Qf[URg'oVr-77PYW9q/,^$CJ&pN%)0nZ\WA_UQJl[CFFXu\s<huO882.qtheZ6>hq">d)^sEj5';_VaYg]AHHX,h*0_9WglB&l,sC8CB.3!^a]qGa";Dq68BX@H4bV8b%DbaA+"Xc=KplK('b>s"5QRXr:Z;GB5#I7oRO&<]A!0k;s!N>76R$sUdh(*-nOBYCH[Z38+:t%MaMSKJ7/d+$pb%V86Nl)WIH8_p=%4!CGt^NJOIAb]I"6=[]M&?4n9&CpE^Q]=b`^<@,(q/lC+<,>==D=rd[S(eE,B]Q`eHKfNF)KFGJ&#ne(Ye,SZ2I'::+u>N:DpN,i%jGgi6D!$A@]Gl4tU:`/7]7E!^.%Qe+\2d6Df?Ag$!N,Zb3a&=B?@=6^?V#Z2[O-973rBP'TN*u`UR.DK0E"$o@<Brdb3bV2WSi)W%jcUYsl*[b<4jlE!Z-=qG(@V8$@q#C5](40!>j/N,LWZ,)?iU,[:Oi/kooK.BgHWCNo"TYPrU9aRgJ:'4]3kR0l[Sj2QiHp]lgNa1%oTrqaa04BMq<bXUs7M_nrqbO'^O6(1n%\k`YCHQMfC+4b07Wtn5ZX2Ar261diSXXp\,Qo6J)1,~>%AI9_PrivateDataEnd